<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo--插入图片(小白+防坑)</title>
    <url>/2020/07/30/Hexo--%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87(%E5%B0%8F%E7%99%BD+%E9%98%B2%E5%9D%91)/</url>
    <content><![CDATA[<h1 id="Hexo—插入图片（小白-防坑）"><a href="#Hexo—插入图片（小白-防坑）" class="headerlink" title="Hexo—插入图片（小白+防坑）"></a>Hexo—插入图片（小白+防坑）</h1><h2 id="一、具体流程"><a href="#一、具体流程" class="headerlink" title="一、具体流程"></a>一、具体流程</h2><ol>
<li><p>安装插件</p>
<ul>
<li>位置：博客根目录（和source、themes同层级的文件）</li>
<li>打开方式：直接cmd或者用git bash打开</li>
<li>命令（<strong>如果安装了淘宝镜像，则npm改成cnpm</strong>，下面有解释）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

</li>
</ol>
<ol start="2">
<li><p>修改配置文件</p>
<ul>
<li><p>文件：hexo根目录下的_config.xml</p>
</li>
<li><p>修改内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改插件的配置文件</p>
<ul>
<li><p>文件位置：/node_modules/hexo-asset-image/index.js</p>
</li>
<li><p>修改内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">              $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>创建放图片的目录</p>
<ul>
<li><p>在source/_post文件夹下创建一个文件夹，名称和你写博客文章的名字<strong>一模一样</strong></p>
</li>
<li><p>将<strong>当前博客文章</strong>的图片放到此文件夹当中</p>
</li>
<li><p>截图</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/30/Hexo--%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87(%E5%B0%8F%E7%99%BD+%E9%98%B2%E5%9D%91)/image.png" alt></p>
</li>
</ul>
</li>
</ol>
<ol start="5">
<li><p>文章怎么插入图片（markdown（<strong>重点</strong>）方式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![](图片名称带后缀而非路径)</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/07/30/Hexo--%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87(%E5%B0%8F%E7%99%BD+%E9%98%B2%E5%9D%91)/image_01.png" alt></p>
</li>
<li><p>最后一步</p>
<ul>
<li><p>重新生成、启动hexo</p>
</li>
<li><p>将hexo部署到远端（github）</p>
</li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<h2 id="二、踩过的坑"><a href="#二、踩过的坑" class="headerlink" title="二、踩过的坑"></a>二、踩过的坑</h2><ol>
<li><p>第一步安装插件报错</p>
</li>
<li><p>npm方式安装插件一直不动</p>
</li>
<li><p>上述两个的解决方法</p>
<ul>
<li><p>位置：还是在博客的根目录中</p>
</li>
<li><p>打开方式：cmd或者git bash</p>
</li>
<li><p>代码（相当于安装的淘宝镜像）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<h2 id="三、参考链接"><a href="#三、参考链接" class="headerlink" title="三、参考链接"></a>三、参考链接</h2><ol>
<li><a href="https://bbs.huaweicloud.com/blogs/141925" target="_blank" rel="noopener">https://bbs.huaweicloud.com/blogs/141925</a></li>
<li><a href="https://www.jianshu.com/p/f72aaad7b852" target="_blank" rel="noopener">https://www.jianshu.com/p/f72aaad7b852</a></li>
<li>感谢大哥，感谢大佬！</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>HTMLCSS---定位</title>
    <url>/2020/07/25/HTMLCSS---%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="HTML-CSS—定位"><a href="#HTML-CSS—定位" class="headerlink" title="HTML/CSS—定位"></a>HTML/CSS—定位</h1><h2 id="一、绝对定位"><a href="#一、绝对定位" class="headerlink" title="一、绝对定位"></a>一、绝对定位</h2><ol>
<li><p>定义</p>
<ul>
<li>相对于父容器移动相应的位置，即<strong>参考对象是父容器</strong>。如果没有父容器，则一直向外找，直到最后的浏览器本身。父容器本身必须有position:relative</li>
<li>自身<strong>原来的位置不保留</strong>，会被下面的元素占据</li>
</ul>
</li>
<li><p>格式</p>
<ul>
<li>position:absolute</li>
</ul>
</li>
<li><p>属性</p>
<ul>
<li>top、bottom、left、right</li>
</ul>
</li>
<li><p>案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.outer</span>&#123;</span></span><br><span class="line">				margin: 0 auto;</span><br><span class="line">				width: 500px;</span><br><span class="line">				height: 500px;</span><br><span class="line">				border: 1px solid red;</span><br><span class="line">				position: relative;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.outer</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">				width: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.inner_01</span>&#123;</span></span><br><span class="line">				background: red;</span><br><span class="line">				position: absolute;</span><br><span class="line">				top: 50px;</span><br><span class="line">				left: 50px;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.inner_02</span>&#123;</span></span><br><span class="line">				background: blue;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner_01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner_02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/07/25/HTMLCSS---%E5%AE%9A%E4%BD%8D/absolute.png" alt="absolute"></p>
</li>
</ol>
<h2 id="二、相对定位"><a href="#二、相对定位" class="headerlink" title="二、相对定位"></a>二、相对定位</h2><ol>
<li><p>定义</p>
<ul>
<li><p>相对于自身来进行定位，即<strong>参考对象是自身</strong></p>
</li>
<li><p>自身<strong>位置保留</strong>，下面元素不会占据自己的原有位置</p>
</li>
</ul>
</li>
<li><p>格式</p>
<ul>
<li>position:relative</li>
</ul>
</li>
<li><p>属性</p>
<ul>
<li>top、bottom、left、right</li>
</ul>
</li>
<li><p>案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.outer</span>&#123;</span></span><br><span class="line">				margin: 0 auto;</span><br><span class="line">				width: 500px;</span><br><span class="line">				height: 500px;</span><br><span class="line">				border: 1px solid red;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.outer</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">				width: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.inner_01</span>&#123;</span></span><br><span class="line">				background: red;</span><br><span class="line">				position: relative;</span><br><span class="line">				top: 50px;</span><br><span class="line">				left: 50px;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.inner_02</span>&#123;</span></span><br><span class="line">				background: blue;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner_01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner_02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/07/25/HTMLCSS---%E5%AE%9A%E4%BD%8D/relative.png" alt="relative"></p>
</li>
</ol>
<h2 id="三、浮动定位"><a href="#三、浮动定位" class="headerlink" title="三、浮动定位"></a>三、浮动定位</h2><ol>
<li><p>定义</p>
<ul>
<li>相对于浏览器移动，即<strong>参考对象是浏览器</strong></li>
<li>本身<strong>位置不保留</strong>，会被下面元素占据自身位置</li>
</ul>
</li>
<li><p>格式</p>
<ul>
<li>position:fixed</li>
</ul>
</li>
<li><p>属性</p>
<ul>
<li>top、bottom、left、right</li>
</ul>
</li>
<li><p>用途</p>
<ul>
<li>锚点</li>
</ul>
</li>
<li><p>案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.outer</span>&#123;</span></span><br><span class="line">				margin: 0 auto;</span><br><span class="line">				width: 500px;</span><br><span class="line">				height: 500px;</span><br><span class="line">				border: 1px solid red;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.outer</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">				width: 100px;</span><br><span class="line">				height: 100px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.inner_01</span>&#123;</span></span><br><span class="line">				background: red;</span><br><span class="line">				position: relative;</span><br><span class="line">				top: 50px;</span><br><span class="line">				left: 50px;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.inner_02</span>&#123;</span></span><br><span class="line">				background: blue;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner_01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner_02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/07/25/HTMLCSS---%E5%AE%9A%E4%BD%8D/fixed.png" alt="fixed"></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hexo--部署到gitee(码云)</title>
    <url>/2020/07/31/Hexo--%E9%83%A8%E7%BD%B2%E5%88%B0gitee(%E7%A0%81%E4%BA%91)/</url>
    <content><![CDATA[<h1 id="Hexo–部署到gitee-码云"><a href="#Hexo–部署到gitee-码云" class="headerlink" title="Hexo–部署到gitee(码云)"></a>Hexo–部署到gitee(码云)</h1><h2 id="一、使用前提"><a href="#一、使用前提" class="headerlink" title="一、使用前提"></a>一、使用前提</h2><ul>
<li>当前针对<strong>已经安装好hexo</strong>，并且部署到github上了，没部署到github上也可以</li>
<li>针对上一个可以看我博客主页，有一个<strong>Hexo搭建个人博客到github（小白+无坑版）</strong>查看即可</li>
</ul>
<h2 id="二、具体流程"><a href="#二、具体流程" class="headerlink" title="二、具体流程"></a>二、具体流程</h2><ol>
<li><p>注册登录码云</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">码云官网：https:<span class="comment">//gitee.com/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>建议用邮箱注册，以后都用一个邮箱注册其他东西</li>
</ul>
</li>
<li><p>新建仓库，复制链接</p>
<ul>
<li><p>加号==》新建仓库</p>
</li>
<li><p>图片演示</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/31/Hexo--%E9%83%A8%E7%BD%B2%E5%88%B0gitee(%E7%A0%81%E4%BA%91)/image_01.png" alt></p>
<p><img src= "/img/loading.gif" data-src="/2020/07/31/Hexo--%E9%83%A8%E7%BD%B2%E5%88%B0gitee(%E7%A0%81%E4%BA%91)/image_02.png" alt></p>
</li>
</ul>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p>文件位置：hexo<strong>根目录下的_config.yml</strong>文件</p>
</li>
<li><p>修改配置</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/31/Hexo--%E9%83%A8%E7%BD%B2%E5%88%B0gitee(%E7%A0%81%E4%BA%91)/image_03.png" alt></p>
</li>
</ul>
</li>
<li><p>部署命令</p>
<ul>
<li><p>打开博客根目录，在文件路径上直接cmd，也可以用git bash写（在根目录右键选择 git bash）</p>
</li>
<li><p>命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果安装了淘宝镜像直接吧npm缓称cnpm</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入完之后会让让你输入gitee的账号密码，直接输入即可</p>
</li>
</ul>
</li>
<li><p>部署到码云的免费静态页面托管服务—Pages</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/31/Hexo--%E9%83%A8%E7%BD%B2%E5%88%B0gitee(%E7%A0%81%E4%BA%91)/image_04.png" alt></p>
</li>
</ol>
<h2 id="三、踩过的坑"><a href="#三、踩过的坑" class="headerlink" title="三、踩过的坑"></a>三、踩过的坑</h2><ol>
<li><p>一直部署不上去</p>
<ul>
<li>可能没有写 npm install hexo-deployer-git –save</li>
</ul>
</li>
<li><p>如果配到其他问题，可以参考以下截图，试试</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/31/Hexo--%E9%83%A8%E7%BD%B2%E5%88%B0gitee(%E7%A0%81%E4%BA%91)/image_05.png" alt></p>
</li>
</ol>
<h2 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h2><ul>
<li>感谢大哥</li>
<li><a href="https://my.oschina.net/ruowu/blog/1492038" target="_blank" rel="noopener">https://my.oschina.net/ruowu/blog/1492038</a></li>
</ul>
<h2 id="五、干就完事了"><a href="#五、干就完事了" class="headerlink" title="五、干就完事了"></a>五、干就完事了</h2>]]></content>
  </entry>
  <entry>
    <title>Hexo搭建个人博客到github（小白+无坑版）</title>
    <url>/2020/08/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B0github%EF%BC%88%E5%B0%8F%E7%99%BD+%E6%97%A0%E5%9D%91%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Hexo搭建个人博客到github（小白-无坑版）"><a href="#Hexo搭建个人博客到github（小白-无坑版）" class="headerlink" title="Hexo搭建个人博客到github（小白+无坑版）"></a>Hexo搭建个人博客到github（小白+无坑版）</h1><h2 id="一、使用前提"><a href="#一、使用前提" class="headerlink" title="一、使用前提"></a>一、使用前提</h2><ol>
<li>windows系统（Linux也可，但是得会有Linux命名）</li>
<li>干就完事了</li>
</ol>
<h2 id="二、搭建流程"><a href="#二、搭建流程" class="headerlink" title="二、搭建流程"></a>二、搭建流程</h2><h3 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h3><ol>
<li><p>node.js的安装</p>
<ul>
<li><p>目的：有包管理器，方便操作</p>
</li>
<li><p>安装步骤</p>
<ul>
<li><p>官网：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></p>
</li>
<li><p>操作</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>检查</li>
</ul>
<ol start="2">
<li><p>淘宝镜像的安装</p>
</li>
<li><p>git的安装</p>
</li>
</ol>
<h3 id="2、hexo搭建"><a href="#2、hexo搭建" class="headerlink" title="2、hexo搭建"></a>2、hexo搭建</h3><h3 id="3、部署到github"><a href="#3、部署到github" class="headerlink" title="3、部署到github"></a>3、部署到github</h3><h2 id="三、感谢大佬"><a href="#三、感谢大佬" class="headerlink" title="三、感谢大佬"></a>三、感谢大佬</h2>]]></content>
  </entry>
  <entry>
    <title>Oracle</title>
    <url>/2020/09/20/Oracle/</url>
    <content><![CDATA[<h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">优点  </span><br><span class="line">	- 风险小，安全性高；</span><br><span class="line">    - 可伸缩性，并行性；</span><br><span class="line">    - 性能高，稳定性强；</span><br><span class="line">缺点</span><br><span class="line">    - 对硬件要求很高；</span><br><span class="line">    - 技术要求性高；</span><br></pre></td></tr></table></figure>

<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li><p>创建表空间(类似文件夹)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create tablespace 表间名 datafile <span class="string">'数据文件名'</span> size 表空间大小</span><br><span class="line">create tablespace test_01 datafile <span class="string">'E:\Desktop\workspace\oracle\test_01\test_01.dbf'</span> size <span class="number">2000</span>M;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建用户并授权</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create user 用户名 identified by 密码 <span class="keyword">default</span> tablespace 表空间表;</span><br><span class="line">create user CodeMao identified by Tiansen123 <span class="keyword">default</span> TABLESPACE test_01;</span><br><span class="line"></span><br><span class="line">GRANT 权限 TO 用户;	</span><br><span class="line">grant connect,resource,dba to CodeMao;</span><br><span class="line">- 权限的种类</span><br><span class="line">    conncet：对表的插入删除、修改和查询</span><br><span class="line">    resource ：创建表、序列和视图等</span><br><span class="line">    dba：管理员权限</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">create table <span class="title">t_stu</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    stuid number(<span class="number">10</span>)</span> primary key,</span></span><br><span class="line"><span class="function">    stuname <span class="title">varchar2</span><span class="params">(<span class="number">20</span>)</span> not <span class="keyword">null</span>,</span></span><br><span class="line"><span class="function">    stusex <span class="title">varchar2</span><span class="params">(<span class="number">20</span>)</span> <span class="keyword">default</span> '男' <span class="title">check</span><span class="params">(stusex in(<span class="string">'男'</span>,<span class="string">'女'</span>)</span>)</span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">create table <span class="title">t_course</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    courseid number(<span class="number">10</span>)</span> primary key,</span></span><br><span class="line"><span class="function">    coursename <span class="title">varchar2</span><span class="params">(<span class="number">20</span>)</span> not <span class="keyword">null</span>,</span></span><br><span class="line"><span class="function">    coursetype <span class="title">varchar2</span><span class="params">(<span class="number">4</span>)</span></span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">create table <span class="title">t_score</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    scoreid number(<span class="number">10</span>)</span> primary key,</span></span><br><span class="line"><span class="function">    stuid <span class="title">number</span><span class="params">(<span class="number">10</span>)</span> references <span class="title">t_stu</span><span class="params">(stuid)</span>,</span></span><br><span class="line"><span class="function">    courseid <span class="title">number</span><span class="params">(<span class="number">10</span>)</span>,</span></span><br><span class="line"><span class="function">    score <span class="title">number</span><span class="params">(<span class="number">10</span>)</span>,</span></span><br><span class="line"><span class="function">    foreign <span class="title">key</span> <span class="params">(courseid)</span> references <span class="title">t_course</span><span class="params">(courseid)</span></span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"></span><br><span class="line">- varchar 和 varchar2</span><br><span class="line">    - varchar是sql中的，varchar2是Oracle独有的</span><br><span class="line">    - varchar汉字占两个字符，英文占一个，varchar2 都占<span class="number">2</span>个</span><br><span class="line">    - varchar对空串不处理，varchar2处理成<span class="keyword">null</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>表记录的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 查询</span><br><span class="line">    select * from t_stu;</span><br><span class="line">    select * from t_course;</span><br><span class="line">    select * from t_score;</span><br><span class="line">- 增加</span><br><span class="line">    <span class="function">insert into t_stu <span class="title">values</span><span class="params">(<span class="number">1</span>,<span class="string">'小明'</span>,<span class="string">'男'</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_stu <span class="title">values</span><span class="params">(<span class="number">2</span>,<span class="string">'小红'</span>,<span class="string">'女'</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_stu <span class="title">values</span><span class="params">(<span class="number">3</span>,<span class="string">'小李'</span>,<span class="string">'男'</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">insert into t_course <span class="title">values</span><span class="params">(<span class="number">1</span>,<span class="string">'Java'</span>,<span class="string">'1'</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_course <span class="title">values</span><span class="params">(<span class="number">2</span>,<span class="string">'C++'</span>,<span class="string">'1'</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_course <span class="title">values</span><span class="params">(<span class="number">3</span>,<span class="string">'穷查理宝典'</span>,<span class="string">'2'</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_course <span class="title">values</span><span class="params">(<span class="number">4</span>,<span class="string">'关键对话'</span>,<span class="string">'2'</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_course <span class="title">values</span><span class="params">(<span class="number">5</span>,<span class="string">'脑筋急转弯'</span>,<span class="string">'3'</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">insert into t_score <span class="title">values</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">99</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_score <span class="title">values</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">88</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_score <span class="title">values</span><span class="params">(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">77</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_score <span class="title">values</span><span class="params">(<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">66</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_score <span class="title">values</span><span class="params">(<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">55</span>)</span></span>;</span><br><span class="line">    <span class="function">insert into t_score <span class="title">values</span><span class="params">(<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">44</span>)</span></span>;</span><br><span class="line">- 删除</span><br><span class="line">    delete from t_stu;</span><br><span class="line">    delete from t_course;</span><br><span class="line">    delete from t_score;</span><br><span class="line">- 修改</span><br><span class="line">    update t_stu set stuname=<span class="string">'小红红'</span> where stuname=<span class="string">'小红'</span>;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>order by</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 默认升序</span><br><span class="line">    asc|desc</span><br><span class="line">	select score from t_score order by <span class="number">1</span>;</span><br><span class="line">- 可以使用数字</span><br><span class="line">    select score from t_score order by <span class="number">1</span> desc;</span><br><span class="line">	select score from t_score order by <span class="number">1</span>;</span><br><span class="line">	select score from t_score order by score;</span><br><span class="line">- nulls</span><br><span class="line">    select score from t_score order by score nulls first;</span><br><span class="line">    select score from t_score order by score nulls last;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>distinct</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 作用：去重</span><br><span class="line">- 用法</span><br><span class="line">    <span class="function">select <span class="title">count</span><span class="params">(distinct stuid)</span> from t_score</span>;</span><br><span class="line">- <span class="keyword">null</span> 只能有一个</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p>where</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 条件查询</span><br><span class="line">- 分类</span><br><span class="line">    - 比较运算符</span><br><span class="line">    	- &gt; &gt;= &lt; &lt;= == != &lt;&gt;</span><br><span class="line">    	select * from t_score where score&gt;<span class="number">60</span>;</span><br><span class="line">    - 逻辑运算符</span><br><span class="line">    	- and or not</span><br><span class="line">        select * from t_score where score&gt;<span class="number">60</span> and stuid = <span class="number">1</span>;</span><br><span class="line">    - 范围查询</span><br><span class="line">    	- between a and b</span><br><span class="line">    	- in</span><br><span class="line">        select * from t_score where score between <span class="number">60</span> and <span class="number">90</span>;</span><br><span class="line">		select * <span class="function">from t_score where score <span class="title">in</span><span class="params">(<span class="number">66</span>,<span class="number">77</span>)</span></span>;</span><br><span class="line">    - 模糊查询</span><br><span class="line">    	- like %|_</span><br><span class="line">    	select * from t_stu where stuname like <span class="string">'小%'</span>;</span><br><span class="line">    - 空查询</span><br><span class="line">    	- is <span class="keyword">null</span></span><br><span class="line">    	- is not <span class="keyword">null</span></span><br><span class="line">        select * from t_score where score is not <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="8">
<li><p>fetch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回两行数据 11g版本及以下版本</span></span><br><span class="line">select * from t_stu where rownum&lt;=<span class="number">2</span>  order by stuid;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">select * from t_stu where fetch next <span class="number">5</span> rows only|with ties</span><br><span class="line">    next == first</span><br><span class="line">    row == row</span><br><span class="line">    only</span><br><span class="line">    with ties 使用必须有order by </span><br><span class="line">    <span class="number">5</span> ==&gt; 偏移量</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol>
<li><p>commit</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 作用：提交数据</span><br><span class="line">- wirte</span><br><span class="line">    优先级</span><br><span class="line">    WAIT 或 NOWAIT (如果省略，WAIT是默认值)</span><br><span class="line">	IMMEDIATE 或 BATCH(IMMEDIATE是省略时的默认值)</span><br><span class="line">	commit ==&gt; commit write wait immediate;</span><br><span class="line">- comment</span><br><span class="line">    注释</span><br><span class="line">	commit comment <span class="string">'这是一个注释哈哈'</span> ;</span><br><span class="line">- force</span><br><span class="line">    强制提交可能已经损害的事务</span><br><span class="line">    COMMIT FORCE <span class="string">'22.14.67'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>commit</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 作用：回滚数据</span><br><span class="line">- 形式</span><br><span class="line">    ROLLBACK [ WORK ] [ TO [SAVEPOINT] savepoint_name  | FORCE <span class="string">'string'</span> ];</span><br><span class="line">- work 可以省略，只是为了符合sql标准</span><br><span class="line">-  TO [SAVEPOINT] savepoint_name 回滚到savepoint</span><br><span class="line">- force 强制回滚</span><br><span class="line">    </span><br><span class="line">set transaction name <span class="string">'c01'</span>;</span><br><span class="line"><span class="function">insert into t_stu <span class="title">values</span><span class="params">(<span class="number">5</span>,<span class="string">'小明1'</span>,<span class="string">'男'</span>)</span></span>;</span><br><span class="line">savepoint c01;</span><br><span class="line"><span class="function">insert into t_stu <span class="title">values</span><span class="params">(<span class="number">4</span>,<span class="string">'小明1'</span>,<span class="string">'男'</span>)</span></span>;</span><br><span class="line"><span class="comment">// 默认回滚到事务名称</span></span><br><span class="line">rollback;</span><br><span class="line"><span class="comment">// 回滚到保存点</span></span><br><span class="line">rollback to savepoint c01;</span><br><span class="line">ROLLBACK FORCE <span class="string">'22.14.67'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>transaction</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SET TRANSACTION [ READ ONLY | READ WRITE ]</span><br><span class="line">                [ ISOLATION LEVEL [ SERIALIZE | READ COMMITED ]</span><br><span class="line">                [ USE ROLLBACK SEGMENT <span class="string">'segment_name'</span> ]</span><br><span class="line">                [ NAME <span class="string">'transaction_name'</span> ];</span><br><span class="line">                 </span><br><span class="line">set transaction read only;</span><br><span class="line">set transaction read write;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>lock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock table 表名称 in 级别 [ WAIT 整数秒 | NOWAIT ];</span><br><span class="line">- 根据级别锁定表</span><br><span class="line">wait：它指定数据库将等待(达到指定整数的特定秒数)以获取 DML 锁定。</span><br><span class="line">NOWAIT：它指定数据库不应该等待释放锁。</span><br><span class="line"></span><br><span class="line">LOCK TABLE suppliers IN SHARE MODE NOWAIT;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>lock_mode</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ROW SHARE</td>
<td>允许同时访问表，但阻止用户锁定整个表以进行独占访问。</td>
</tr>
<tr>
<td>ROW EXCLUSIVE</td>
<td>允许对表进行并发访问，但阻止用户以独占访问方式锁定整个表并以共享方式锁定表。</td>
</tr>
<tr>
<td>SHARE UPDATE</td>
<td>允许同时访问表，但阻止用户锁定整个表以进行独占访问。</td>
</tr>
<tr>
<td>SHARE</td>
<td>允许并发查询，但用户无法更新锁定的表。</td>
</tr>
<tr>
<td>SHARE ROW EXCLUSIVE</td>
<td>用户可以查看表中的记录，但是无法更新表或锁定<code>SHARE</code>表中的表。</td>
</tr>
<tr>
<td>EXCLUSIVE</td>
<td>允许查询锁定的表格，但不能进行其他活动。</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><ol>
<li><p>创建外键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">	<span class="function">create table <span class="title">t_score</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        scoreid number(<span class="number">10</span>)</span> primary key,</span></span><br><span class="line"><span class="function">        stuid <span class="title">number</span><span class="params">(<span class="number">10</span>)</span> references <span class="title">t_stu</span><span class="params">(stuid)</span>,</span></span><br><span class="line"><span class="function">        courseid <span class="title">number</span><span class="params">(<span class="number">10</span>)</span>,</span></span><br><span class="line"><span class="function">        score <span class="title">number</span><span class="params">(<span class="number">10</span>)</span>,</span></span><br><span class="line"><span class="function">        CONSTRAINT a foreign <span class="title">key</span> <span class="params">(courseid)</span> references <span class="title">t_course</span><span class="params">(courseid)</span></span></span><br><span class="line"><span class="function">	)</span>;</span><br><span class="line">方式二：</span><br><span class="line">	<span class="function">alter table t_b add constraint a foreign <span class="title">key</span> <span class="params">(aid)</span> references <span class="title">t_a</span><span class="params">(aid)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>级联删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">作用：比如student和score，score中的stuid设置了外键级联，那么删除student中stuid中的某个值，score一并删除</span><br><span class="line">方式一：</span><br><span class="line">    <span class="function">create table <span class="title">t_score</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        scoreid number(<span class="number">10</span>)</span> primary key,</span></span><br><span class="line"><span class="function">        stuid <span class="title">number</span><span class="params">(<span class="number">10</span>)</span> references <span class="title">t_stu</span><span class="params">(stuid)</span>,</span></span><br><span class="line"><span class="function">        courseid <span class="title">number</span><span class="params">(<span class="number">10</span>)</span>,</span></span><br><span class="line"><span class="function">        score <span class="title">number</span><span class="params">(<span class="number">10</span>)</span>,</span></span><br><span class="line"><span class="function">        CONSTRAINT a foreign <span class="title">key</span> <span class="params">(courseid)</span> references <span class="title">t_course</span><span class="params">(courseid)</span></span></span><br><span class="line"><span class="function">        on delete cascade</span></span><br><span class="line"><span class="function">	)</span>;</span><br><span class="line">方式二：</span><br><span class="line">    <span class="function">alter table t_b add constraint a foreign <span class="title">key</span> <span class="params">(aid)</span> references <span class="title">t_a</span><span class="params">(aid)</span> on delete cascade</span>;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>删除外键</p>
</li>
<li><p>禁用外键</p>
</li>
<li><p>启动外键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">alter table t_b drop constraint a;</span><br><span class="line">alter table t_b disable constraint a;</span><br><span class="line">alter table t_b enable constraint a;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- EXTRACT()</span><br><span class="line">    - 提取年月日时分秒</span><br><span class="line">    eg：<span class="function">SELECT <span class="title">EXTRACT</span><span class="params">(YEAR FROM OrderDate)</span> AS OrderYear FROM Orders</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">-<span class="title">ascii</span><span class="params">(<span class="keyword">char</span>)</span></span></span><br><span class="line"><span class="function">    - 返回字符的ascii</span></span><br><span class="line"><span class="function">    - select <span class="title">ascii</span><span class="params">(<span class="string">'b'</span>)</span> from dual</span>;</span><br><span class="line"></span><br><span class="line">-asciistr(string)</span><br><span class="line">    - 如果string是ascii表中的数据就返回原来数组，否则返回\xxxx</span><br><span class="line">    - <span class="function">select <span class="title">asciistr</span><span class="params">(<span class="string">'abc'</span>)</span> from dual</span>;</span><br><span class="line">	- <span class="function">select <span class="title">asciistr</span><span class="params">(<span class="string">'田田'</span>)</span> from dual</span>;</span><br><span class="line"></span><br><span class="line">- chr(number_code)</span><br><span class="line">    - 通过ascii返回对应的字符</span><br><span class="line">    - <span class="function">select <span class="title">chr</span><span class="params">(ascii(<span class="string">'b'</span>)</span>) from dual</span>;</span><br><span class="line"></span><br><span class="line">- compose()</span><br><span class="line">    Unistring值	    结果字符</span><br><span class="line">	unistr(<span class="string">'\0300'</span>)	 重音符(`)</span><br><span class="line">	unistr(<span class="string">'\0301'</span>)	 锐音符(‘)</span><br><span class="line">	unistr(<span class="string">'\0302'</span>)	 (^)</span><br><span class="line">	unistr(<span class="string">'\0303'</span>)	  ~</span><br><span class="line">	unistr(<span class="string">'\0308'</span>)	 变音符(¨)</span><br><span class="line">    <span class="function">select <span class="title">unistr</span><span class="params">(<span class="string">'\0300'</span>)</span> from dual</span>;</span><br><span class="line"></span><br><span class="line">- concat()</span><br><span class="line">    - 连接，和||功能类似</span><br><span class="line">    - 和||的区别</span><br><span class="line">    	- concat只能连接两个字符</span><br><span class="line">    	- || 可以连接多个字符</span><br><span class="line">    <span class="function">select <span class="title">concat</span><span class="params">(<span class="string">'abc'</span>,<span class="string">'cde'</span>)</span> from dual</span>;</span><br><span class="line">	select <span class="string">'abc'</span>||<span class="string">'cde'</span>||<span class="string">'x'</span> from dual;</span><br><span class="line"></span><br><span class="line">- ||</span><br><span class="line">    - 作用：连接多个字符串</span><br><span class="line">    - select <span class="string">'abc'</span>||<span class="string">'cde'</span>||<span class="string">'x'</span> from dual;</span><br><span class="line">	- 连接单引号</span><br><span class="line">        select <span class="string">'let'</span><span class="string">'s'</span> || <span class="string">' me'</span> from dual;</span><br><span class="line">        select <span class="string">''</span><span class="string">''</span> || <span class="string">'b'</span> from dual;</span><br><span class="line"></span><br><span class="line">- convert()</span><br><span class="line">    - 字符集转换</span><br><span class="line">    - convert(字符串，要转化的字符集，[字符串从选的要转化的字符集])</span><br><span class="line"> </span><br><span class="line">- dump()</span><br><span class="line">    - 返回数据类型代码，字符串长度，表达式内部表示形式</span><br><span class="line">    - dump(<span class="string">'tech'</span>)</span><br><span class="line">  	- <span class="function">select <span class="title">dump</span><span class="params">(<span class="string">'tech'</span>)</span> from dual</span>;</span><br><span class="line"></span><br><span class="line">- initcap(string)</span><br><span class="line">    - 将string中的所有单词的第一个字母转换成大写，其他都是小写</span><br><span class="line">    - <span class="function">select <span class="title">initcap</span><span class="params">(<span class="string">'sTRING main'</span>)</span> from dual</span>;</span><br></pre></td></tr></table></figure>

<h2 id="sql语句的执行顺序"><a href="#sql语句的执行顺序" class="headerlink" title="sql语句的执行顺序"></a>sql语句的执行顺序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from&#x3D;&#x3D;&gt;join&#x3D;&#x3D;&gt;on&#x3D;&#x3D;&gt;where&#x3D;&#x3D;&gt;group by&#x3D;&#x3D;&gt;avg...&#x3D;&#x3D;&gt;having&#x3D;&#x3D;&gt;select&#x3D;&#x3D;&gt;distinct&#x3D;&#x3D;&gt;order by</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>lambda</title>
    <url>/2020/10/14/lambda/</url>
    <content><![CDATA[<h1 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 作用：就是为了简化函数式接口的实现,就是不需要在定义一个实现接口的类了</span><br><span class="line">2. 什么是函数式接口？</span><br><span class="line">    一个接口当中之后一个抽象方法</span><br><span class="line">3. 简化</span><br><span class="line">	有参数，有返回值</span><br><span class="line">4.案例</span><br><span class="line"></span><br><span class="line">package duoxiancheng;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * lambda 表达式</span><br><span class="line"> *   1. 作用：就是为了简化函数式接口的实现</span><br><span class="line"> *   2. 什么是函数式接口？</span><br><span class="line"> *         一个接口当中之后一个抽象方法</span><br><span class="line"> *   3. 简化：有参数，有返回值</span><br><span class="line"> */</span><br><span class="line">public class Demo_08 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Love love = new ILove();</span><br><span class="line">        love.love();</span><br><span class="line"></span><br><span class="line">        // lambda 方式实现函数式接口(无参)</span><br><span class="line">        love = ()-&gt;&#123;</span><br><span class="line">            System.out.println("我是lambda方式实现的函数式接口");</span><br><span class="line">        &#125;;</span><br><span class="line">        love.love();</span><br><span class="line"></span><br><span class="line">        // lambda方式实现函数式接口(有参)</span><br><span class="line">        Love2 love2 = (int a)-&gt;&#123;</span><br><span class="line">            System.out.println("我是lambda方式实现的函数式接口(有参)");</span><br><span class="line">        &#125;;</span><br><span class="line">        love2.Love2(10);</span><br><span class="line"></span><br><span class="line">        // 省略写法</span><br><span class="line">        // 省略参数类型</span><br><span class="line">        Love2 love3 = (a)-&gt;&#123;</span><br><span class="line">            System.out.println("我是lambda方式实现的函数式接口(有参)");</span><br><span class="line">        &#125;;</span><br><span class="line">        love3.Love2(10);</span><br><span class="line">        // 当参数只有一个的时候可以省略括号</span><br><span class="line">        // 当代码块只有一个的时候可以省略大括号</span><br><span class="line">        Love2 love4 = a-&gt; System.out.println("我是lambda方式实现的函数式接口(有参)");</span><br><span class="line">        love4.Love2(10);</span><br><span class="line"></span><br><span class="line">        // 有返回值</span><br><span class="line">        Love3 love5 = ()-&gt; &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;;</span><br><span class="line">        int a = love5.Love3();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 定义一个函数式接口</span><br><span class="line"> */</span><br><span class="line">interface Love&#123;</span><br><span class="line">    void love();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 普通方式实现接口</span><br><span class="line"> */</span><br><span class="line">class ILove implements Love&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void love() &#123;</span><br><span class="line">        System.out.println("我是通过实现接口的方式来实现函数式接口");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定义一个有参的函数时接口</span><br><span class="line"> */</span><br><span class="line">interface Love2&#123;</span><br><span class="line">    void Love2(int a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 定义一个有返回值的函数时接口</span><br><span class="line"> */</span><br><span class="line">interface Love3&#123;</span><br><span class="line">    int Love3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>vuejs</title>
    <url>/2020/10/14/vuejs/</url>
    <content><![CDATA[<h1 id="Vue的定义及作用"><a href="#Vue的定义及作用" class="headerlink" title="Vue的定义及作用"></a>Vue的定义及作用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue 是一套用于构建用户界面的渐进式JavaScript框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，方便与第三方库或既有项目整合。</span><br></pre></td></tr></table></figure>

<h1 id="Vue的优缺点"><a href="#Vue的优缺点" class="headerlink" title="Vue的优缺点"></a>Vue的优缺点</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">优点：</span><br><span class="line">	1. 轻量级框架</span><br><span class="line">	2. 数据双向绑定</span><br><span class="line">	3. 支持单页面应用</span><br><span class="line">	4. 组件化开发</span><br><span class="line">缺点：</span><br><span class="line">	1. 因为支持单页面应用，不利于seo优化</span><br><span class="line">	2. 初次加载费时</span><br></pre></td></tr></table></figure>

<h1 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">M:model</span><br><span class="line">V:view</span><br><span class="line">VM:viewModel</span><br><span class="line">可以让前端开发者也可以写业务逻辑</span><br></pre></td></tr></table></figure>

<h1 id="Vue的引用方式"><a href="#Vue的引用方式" class="headerlink" title="Vue的引用方式"></a>Vue的引用方式</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入本地vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在线引用vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue基本指令"><a href="#Vue基本指令" class="headerlink" title="Vue基本指令"></a>Vue基本指令</h1><ol>
<li><p>文本渲染指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 数据绑定 </span><br><span class="line">	格式：&#123;&#123;&#125;&#125;</span><br><span class="line">2. v-model:用来数据的双向绑定，默认是表单绑定</span><br><span class="line">3. v-text：用来输出文本内容</span><br><span class="line">4. v-html：用来输出html代码</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>vue_01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 在线引用vue.js --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- vue-js 文本渲染 4个指令 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 1.数据绑定--&gt;</span></span><br><span class="line">			Hello:&#123;&#123;name&#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 2. 通过v-model修改变量的值 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">/* 选定div */</span></span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					name:<span class="string">"CodeMao"</span>,</span></span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;);</span><br><span class="line"><span class="actionscript">			vm.name = <span class="string">"Code"</span>;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 防止重名</span></span></span><br><span class="line"><span class="actionscript">			vm.$data.name = <span class="string">"Cod"</span>;</span></span><br><span class="line"><span class="actionscript">			vm._data.name = <span class="string">"C"</span>;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;Message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- v-text == innerText --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- v-html == innerHtml --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"message1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		hello    Morning!</span><br><span class="line">		<span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">			保持原格式输出</span><br><span class="line">			hello    Morning!</span><br><span class="line">		<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>属性绑定指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 格式：</span><br><span class="line">	v-bind:属性名 或者 :属性名</span><br><span class="line">2. 作用</span><br><span class="line">	动态绑定属性</span><br><span class="line">3. 注意对象和数组的绑定</span><br><span class="line">4. 案例</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>vue_01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 在线引用vue.js --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 属性绑定 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- v-bind:属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bind"</span> <span class="attr">style</span>=<span class="string">"width: 100px;height: 100px;border: 1px solid red;"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">"MSG"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">"MSG2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">:hidden</span>=<span class="string">"MSG3"</span>&gt;</span>hahaha<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 数组绑定 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass,errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 三目 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[istrue?classA:classB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vn = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#demo"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					Message:<span class="string">"MESSAGEX"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">					message1:"This is <span class="tag">&lt;<span class="name">h3</span>&gt;</span>msg1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>",</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					message2:"This is <span class="tag">&lt;<span class="name">h3</span>&gt;</span>msg1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>",</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">// v-bind</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vb = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#bind"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					MSG:<span class="string">"AAA"</span>,</span></span><br><span class="line"><span class="actionscript">					MSG2:<span class="string">"GOOD!"</span>,</span></span><br><span class="line"><span class="actionscript">					MSG3:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">					activeClass:<span class="string">"test1"</span>,</span></span><br><span class="line"><span class="actionscript">					errorClass:<span class="string">"test2"</span>,</span></span><br><span class="line"><span class="actionscript">					istrue:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">					classA:<span class="string">"正确"</span>,</span></span><br><span class="line"><span class="actionscript">					classB:<span class="string">"错误"</span>,</span></span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">案例二：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObj"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对象绑定 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[&#123;color:rcolor,fontSize:size + 'px'&#125;,D]"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"[styleObj,D]"</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#demo"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					rcolor:<span class="string">"red"</span>,</span></span><br><span class="line">					size:24,</span><br><span class="line">					styleObj:&#123;</span><br><span class="line"><span class="actionscript">						color:<span class="string">"blue"</span>,</span></span><br><span class="line"><span class="actionscript">						fontSize:<span class="string">"42px"</span>,</span></span><br><span class="line">					&#125;,</span><br><span class="line">					D:&#123;</span><br><span class="line"><span class="actionscript">						display:<span class="string">"inline-block"</span>,</span></span><br><span class="line">					&#125;,</span><br><span class="line">				&#125;,</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>事件处理指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 格式</span><br><span class="line">	v-on:事件名 或者 @事件名</span><br><span class="line">2. 作用</span><br><span class="line">	动态绑定事件（注意鼠标的左右键和滚轮的绑定）</span><br><span class="line">3. 案例</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"pointMe()"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"pointYou()"</span>&gt;</span>点击你<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				<span class="comment">/* 方法 */</span></span></span><br><span class="line">				methods:&#123;</span><br><span class="line">					pointMe()&#123;</span><br><span class="line"><span class="actionscript">						alert(<span class="string">"pointMe"</span>);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					pointYou()&#123;</span><br><span class="line"><span class="actionscript">						alert(<span class="string">"pointYou"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 单击事件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count+=1"</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count+=1"</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"c1"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('hi')"</span>&gt;</span>内联语句<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			&#123;&#123;num&#125;&#125;</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur</span>=<span class="string">"blurZhi"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"zhi"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add(zhi)"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub(zhi)"</span>&gt;</span>减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 鼠标事件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseup.right</span>=<span class="string">"right()"</span> @<span class="attr">mouseup.left</span>=<span class="string">"left()"</span> @<span class="attr">mouseup.middle</span>=<span class="string">"middle()"</span>&gt;</span>&#123;&#123;mouseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:mouseup.right</span>=<span class="string">"right()"</span> <span class="attr">v-on:mouseup.left</span>=<span class="string">"left()"</span> <span class="attr">v-on:mouseup.middle</span>=<span class="string">"middle()"</span>&gt;</span>&#123;&#123;mouseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		&gt;</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vvm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#demo"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					count:0,</span><br><span class="line"><span class="actionscript">					message:<span class="string">"Hello"</span>,</span></span><br><span class="line"><span class="actionscript">					test:<span class="string">''</span>,</span></span><br><span class="line">					num:0,</span><br><span class="line">					zhi:0,</span><br><span class="line"><span class="actionscript">					mouseMsg:<span class="string">"Kong"</span>,</span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					c1()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.message += <span class="string">' vue!'</span>;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					say(hi)&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.test = hi;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="keyword">this</span>.test);</span></span><br><span class="line"><span class="actionscript">						alert(<span class="keyword">this</span>.count);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					add(i)&#123;</span><br><span class="line"><span class="javascript">						i = <span class="built_in">Number</span>(i);</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.num += i;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					sub(i)&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.num -= i;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					blurZhi()&#123;</span><br><span class="line"><span class="javascript">						<span class="keyword">this</span>.zhi = <span class="built_in">document</span>.getElementById(<span class="string">"zhi"</span>).value;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					left()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.mouseMsg = <span class="string">"left"</span>;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					middle()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.mouseMsg = <span class="string">"middle"</span>;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					right()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.mouseMsg = <span class="string">"right"</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>条件渲染指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 格式</span><br><span class="line">	v-if="变量名" v-else-if="变量名" v-else</span><br><span class="line">2. 作用</span><br><span class="line">	只渲染true的代码，相当于条件判断</span><br><span class="line">3. 注意v-show和v-if</span><br><span class="line">	v-show 也是可以让页面显示不显示，但是页面还是渲染了，只不过实质上就是display=none了，适用频繁切换</span><br><span class="line">	v-if   懒加载，只渲染条件是true的，适用于开销比较小的</span><br><span class="line">4. 案例（可以作轮播的一部分）</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-if 条件渲染指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/defen_01.png"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/bigLogo.jpg"</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==1"</span>&gt;</span></span><br><span class="line">				1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type==2"</span>&gt;</span></span><br><span class="line">				2</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type==3"</span>&gt;</span></span><br><span class="line">				3</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">				4</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"isP"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"A()"</span>&gt;</span>p变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isLB == 1"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span> <span class="attr">src</span>=<span class="string">"img/luo01.jpg"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isLB == 2"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span> <span class="attr">src</span>=<span class="string">"img/luo02.jpg"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isLB == 3"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span> <span class="attr">src</span>=<span class="string">"img/luo03.jpg"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isLB == 4"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span> <span class="attr">src</span>=<span class="string">"img/luo04.jpg"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isLB == 5"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span> <span class="attr">src</span>=<span class="string">"img/luo05.jpg"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"B()"</span>&gt;</span>轮播<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- v-show 不管是true还是false都渲染 只不过隐藏或显示了 类似于display  适用于频繁的切换--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- v-if 惰性的 只有条件是true 的时候才渲染 开销小 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow1"</span>&gt;</span>1212<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"isShow2"</span>&gt;</span>1212<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					isShow:<span class="literal">true</span>,<span class="comment">// Boolean默认false</span></span></span><br><span class="line">					type:1,</span><br><span class="line"><span class="actionscript">					isP:<span class="literal">true</span>,</span></span><br><span class="line">					isLB:1,</span><br><span class="line"><span class="actionscript">					isShow1:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">					isShow2:<span class="literal">true</span>,</span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line"><span class="actionscript">					A:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.isP = <span class="literal">false</span>;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					B()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span> (<span class="keyword">this</span>.isLB &gt; <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.isLB = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.isLB++;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>循环遍历指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 格式</span><br><span class="line">	遍历数组</span><br><span class="line">		// 一个默认是value</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in users"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		// 注意括号中顺序不可以变，后面的顺序可以变</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in users"</span>&gt;</span>&#123;&#123;index&#125;&#125;&#123;&#123;key&#125;&#125;&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	遍历对象</span><br><span class="line">		// 一个默认是value</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in users"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		// 注意括号中顺序不可以变，后面的顺序可以变</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in users"</span>&gt;</span>&#123;&#123;index&#125;&#125;&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	遍历数组对象 ***</span><br><span class="line">		// 一个默认是value</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in users"</span>&gt;</span>&#123;&#123;value&#125;&#125; 或者&#123;&#123;value.属性名&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		// 注意括号中顺序不可以变，后面的顺序可以变</span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in users"</span>&gt;</span>&#123;&#123;index&#125;&#125;&#123;&#123;key&#125;&#125;&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">2. 案例</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 遍历对象 注意括号顺序--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in user"</span>&gt;</span>&#123;&#123;index&#125;&#125; &#123;&#123;key&#125;&#125; &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 一个参数默认是value --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"value in user"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item1,index) in items"</span> <span class="attr">v-on:click</span>=<span class="string">"onclick(index)"</span>&gt;</span>&#123;&#123;item1&#125;&#125;&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 一个参数默认是value --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item1 in items"</span> <span class="attr">v-on:click</span>=<span class="string">"onclick(index)"</span>&gt;</span>&#123;&#123;item1&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 遍历数组对象 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items2"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					user:&#123;</span><br><span class="line">						userId:1,</span><br><span class="line"><span class="actionscript">						userName:<span class="string">"及时雨"</span>,</span></span><br><span class="line"><span class="actionscript">						realName:<span class="string">"宋江"</span>,</span></span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					items:[<span class="string">"麻婆豆腐"</span>,<span class="string">"鱼香肉丝"</span>,<span class="string">"肉末茄子"</span>],</span></span><br><span class="line">					items2:[</span><br><span class="line"><span class="actionscript">						&#123;message:<span class="string">"111"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">						&#123;message:<span class="string">"222"</span>&#125;</span></span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					onclick(index)&#123;</span><br><span class="line">						alert(index + 1);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>综合案例（补充splice知识）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 目的：做一个表单的添加删除和清空</span><br><span class="line">2. 思路：通过for遍历，然后通过push&#x2F;splice添加，splice删除，splice清空</span><br><span class="line">3. splice(开始下标,长度,[替换内容])</span><br><span class="line">4. 案例</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">		&lt;title&gt;综合案例&lt;&#x2F;title&gt;</span><br><span class="line">		&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">		&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">			table&#123;</span><br><span class="line">				border-collapse: collapse;</span><br><span class="line">				width: 400px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line">			tr&#123;</span><br><span class="line">				border-bottom: 1px solid black;</span><br><span class="line">			&#125;</span><br><span class="line">		&lt;&#x2F;style&gt;</span><br><span class="line">	&lt;&#x2F;head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">		&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">			&lt;table border&#x3D;&quot;0&quot; cellspacing&#x3D;&quot;&quot; cellpadding&#x3D;&quot;&quot;&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;th&gt;编号&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;th&gt;年龄&lt;&#x2F;th&gt;</span><br><span class="line">					&lt;th&gt;操作&lt;&#x2F;th&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr v-for&#x3D;&quot;(item,index) in users&quot;&gt;</span><br><span class="line">					&lt;td&gt;&#123;&#123;item.uid&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">					&lt;td&gt;&#123;&#123;item.uname&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">					&lt;td&gt;&#123;&#123;item.uage&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">					&lt;td&gt;&lt;button type&#x3D;&quot;button&quot; @click&#x3D;&quot;del(index)&quot;&gt;删除&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">				&lt;tr&gt;</span><br><span class="line">					&lt;td colspan&#x3D;&quot;4&quot;&gt;&lt;button type&#x3D;&quot;button&quot; @click&#x3D;&quot;clear()&quot;&gt;清空&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;</span><br><span class="line">				&lt;&#x2F;tr&gt;</span><br><span class="line">			&lt;&#x2F;table&gt;</span><br><span class="line">			&lt;!-- 添加 --&gt;</span><br><span class="line">			&lt;h3&gt;添加&lt;&#x2F;h3&gt;</span><br><span class="line">			姓名:&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;uname&quot;&#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">			年龄:&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;uage&quot;&#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">			&lt;button type&#x3D;&quot;button&quot; @click&#x3D;&quot;add()&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">			var vm &#x3D; new Vue(&#123;</span><br><span class="line">				el:&quot;#app&quot;,</span><br><span class="line">				data:&#123;</span><br><span class="line">					users:[</span><br><span class="line">						&#123;</span><br><span class="line">							uid:1,</span><br><span class="line">							uname:&quot;张三&quot;,</span><br><span class="line">							uage:20</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							uid:2,</span><br><span class="line">							uname:&quot;李四&quot;,</span><br><span class="line">							uage:21</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							uid:3,</span><br><span class="line">							uname:&quot;王五&quot;,</span><br><span class="line">							uage:22</span><br><span class="line">						&#125;,</span><br><span class="line">					],</span><br><span class="line">					uname:&quot;&quot;,</span><br><span class="line">					uage:0</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					&#x2F;&#x2F; splice(下标,长度,[替换内容])--可以添加&#x2F;删除&#x2F;修改</span><br><span class="line">					&#x2F;&#x2F; 删除</span><br><span class="line">					del(index)&#123;</span><br><span class="line">						this.users.splice(index, 1);</span><br><span class="line">					&#125;,</span><br><span class="line">					&#x2F;&#x2F; 清空</span><br><span class="line">					clear()&#123;</span><br><span class="line">						this.users.splice(0, this.users.length);</span><br><span class="line">					&#125;,</span><br><span class="line">					&#x2F;&#x2F; 添加</span><br><span class="line">					add()&#123;</span><br><span class="line">						var uname &#x3D; this.uname;</span><br><span class="line">						var uage &#x3D; this.uage;</span><br><span class="line">						var user &#x3D; &#123;uid:this.users.length + 1, uname:uname, uage:uage&#125;;</span><br><span class="line">						this.users.splice(this.users.length, 0, user);</span><br><span class="line">						&#x2F;&#x2F;this.users.push(user);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 格式：</span><br><span class="line">	computed:&#123;&#125;</span><br><span class="line">2. 作用</span><br><span class="line">	对变量的加工，eg:字符串反转，添加或删除商品的数量，从而改变总价，主要是想把变量的加工都放一个地方，让代码看起来更舒服。</span><br><span class="line">3. 注意</span><br><span class="line">	computed里面的变量也是新声明的所以data里面的变量不能与它同名</span><br><span class="line">4. 案例</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- computed 计算属性  --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 作用:主要是让处理数据逻辑写在固定的位置，并且返回自己定义的属性名和值 --&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 案例1:反转数据 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>原:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>反:&#123;&#123;rmsg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>来一棍<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>伤害:&#123;&#123;hurt&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意vue里面不能套vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"napp"</span>&gt;</span>不同Vue反转:&#123;&#123;nrmsg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					msg:<span class="string">"孙行者"</span>,</span></span><br><span class="line"><span class="actionscript">					stick:<span class="number">0</span>,<span class="comment">// 棍数</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed:&#123;</span><br><span class="line">					rmsg()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					hurt()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="keyword">this</span>.stick * <span class="number">999</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.stick++;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#napp"</span>,</span></span><br><span class="line">				computed:&#123;</span><br><span class="line">					nrmsg()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> vm.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 案例2:修改总价 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">width</span>=<span class="string">"900px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">"del()"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"count"</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;&#123;&#123;count * price&#125;&#125;&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;zj&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vv = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#demo"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					price:1000,</span><br><span class="line">					count:2</span><br><span class="line">				&#125;,</span><br><span class="line">				computed:&#123;</span><br><span class="line">					zj()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="keyword">this</span>.count * <span class="keyword">this</span>.price;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.count++;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					del()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.count--;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>监听器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 格式：watch：&#123;&#125;</span><br><span class="line">2. 分类</span><br><span class="line">	浅度监听,主要监听基本数据类型</span><br><span class="line">	深度监听，主要监听引用数据类型</span><br><span class="line">3. 案例，注意书写格式</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>watch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			td&#123;</span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- watch 监听器 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 作用:当变量发生改变的时候触发，可以获取原始值和改变后的值 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 分类</span></span><br><span class="line"><span class="comment">			浅度监听：监听基本数据类型的变化</span></span><br><span class="line"><span class="comment">			深度监听：监听引用数据类型的变化，eg 对象</span></span><br><span class="line"><span class="comment">				格式：在watch里面的最后加一个 deep:true</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 案例1:打印year+1,score+1之前和之后的值 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"year++"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>year+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"score++"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>score+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"year"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"score"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					message1:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">					message2:<span class="string">""</span>,</span></span><br><span class="line">					year:2019,</span><br><span class="line">					score:25</span><br><span class="line">				&#125;,</span><br><span class="line">				watch:&#123;</span><br><span class="line"><span class="actionscript">					<span class="comment">// 监听变量</span></span></span><br><span class="line"><span class="actionscript">					year:<span class="function"><span class="keyword">function</span><span class="params">(xin, old)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.message1 = <span class="string">"上一年"</span> + old + <span class="string">"当前年"</span> + xin;</span></span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					score:<span class="function"><span class="keyword">function</span><span class="params">(xin, old)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.message2 = <span class="string">"上一年"</span> + old + <span class="string">"当前年"</span> + xin;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 案例2:深度监听 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 案例2:修改总价 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"900px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>商品数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;goods.price&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">"del()"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width: 30px;text-align: center;"</span> <span class="attr">v-model</span>=<span class="string">"goods.count"</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- &lt;td&gt;&#123;&#123;count * price&#125;&#125;&lt;/td&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;zj&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vv = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#demo"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					goods:&#123;</span><br><span class="line">						price:1000,</span><br><span class="line">						count:2,</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				computed:&#123;</span><br><span class="line">					zj()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="keyword">this</span>.goods.count * <span class="keyword">this</span>.goods.price;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.goods.count++;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					del()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.goods.count--;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				watch:&#123;</span><br><span class="line"><span class="actionscript">					<span class="comment">// 深度监听 监听对象</span></span></span><br><span class="line">					goods:&#123;</span><br><span class="line"><span class="actionscript">						handler:<span class="function"><span class="keyword">function</span><span class="params">(newVal, oldVal)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="built_in">console</span>.log(oldVal.count);</span></span><br><span class="line"><span class="javascript">							<span class="built_in">console</span>.log(newVal.count);</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.goods.count = <span class="keyword">this</span>.goods.count==<span class="number">0</span>?<span class="number">1</span>:newVal.count;</span></span><br><span class="line">						&#125;,</span><br><span class="line"><span class="actionscript">						deep:<span class="literal">true</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="9">
<li><p>表单绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. v-model 数据的双向绑定，默认是表单</span><br><span class="line"></span><br><span class="line">2. 修饰符</span><br><span class="line">	v-model.lazy 失去焦点的时候在触发双向绑定</span><br><span class="line">	v-model.trip 去掉前后空格</span><br><span class="line">	v-model.number 将数据类型转化成Number，如果输入的非数字则保持原样</span><br><span class="line">3. 注意 v—model 实际上是绑定的input的value值</span><br><span class="line">4. 案例</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-model<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- v-model 的表单绑定 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- v-model取的value值 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">v-model</span>=<span class="string">"myForm.sex"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>男</span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">v-model</span>=<span class="string">"myForm.sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>女</span><br><span class="line">			<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line">					myForm:&#123;</span><br><span class="line">						sex:0</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				watch:&#123;</span><br><span class="line">					myForm:&#123;</span><br><span class="line"><span class="actionscript">						handler:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="built_in">console</span>.log(<span class="keyword">this</span>.myForm.sex);</span></span><br><span class="line">						&#125;,</span><br><span class="line"><span class="actionscript">						deep:<span class="literal">true</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- v-model 修饰符 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- .lazy 失去焦点的时候触发 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"lazyStr"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;lazyStr&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- .trip 去掉前后空格 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trip</span>=<span class="string">"tripStr"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;tripStr&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- .number 转换成数字 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.number</span>=<span class="string">"numberStr"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;numberStr + 1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#demo"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					lazyStr:<span class="string">"123"</span>,</span></span><br><span class="line"><span class="actionscript">					tripStr:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">					numberStr:<span class="string">""</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				watch:&#123;</span><br><span class="line"><span class="actionscript">					tripStr:<span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(val);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>变异方法(7)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>VUE的编译方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 变异方法</span></span><br><span class="line"><span class="comment">			push</span></span><br><span class="line"><span class="comment">			pop</span></span><br><span class="line"><span class="comment">			shift</span></span><br><span class="line"><span class="comment">			unshift</span></span><br><span class="line"><span class="comment">			splice 上面有案例</span></span><br><span class="line"><span class="comment">			sort</span></span><br><span class="line"><span class="comment">			reverse</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in jiShu"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"pu"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"po"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"delOne"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"unshift1"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"sort1"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"reverse1"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"ul"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					jiShu:[<span class="string">"JS"</span>,<span class="string">"JQ"</span>,<span class="string">"VUE"</span>],</span></span><br><span class="line"><span class="actionscript">					pu:<span class="string">"添加"</span>,</span></span><br><span class="line"><span class="actionscript">					po:<span class="string">"删除末尾"</span>,</span></span><br><span class="line"><span class="actionscript">					delOne:<span class="string">"删除开头"</span>,</span></span><br><span class="line"><span class="actionscript">					unshift1:<span class="string">"开头添加"</span>,</span></span><br><span class="line"><span class="actionscript">					sort1:<span class="string">"排序"</span>,</span></span><br><span class="line"><span class="actionscript">					reverse1:<span class="string">"翻转数组"</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				watch:&#123;</span><br><span class="line">					pu(newVal)&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 在数组的最后添加一个元素 并返回数组长度</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> len = <span class="keyword">this</span>.jiShu.push(newVal);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(len);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					po()&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 删除数组的最有一个元素 并返回删除的值</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> popZhi = <span class="keyword">this</span>.jiShu.pop();</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(popZhi);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					delOne()&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 删除数组的第一个元素，成功返回删除元素的值</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> delOneZhi = <span class="keyword">this</span>.jiShu.shift();</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(delOneZhi);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					unshift1(newVal)&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 往数组最前面添加一个元素，成功返回当前数组的长度</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> len = <span class="keyword">this</span>.jiShu.unshift(newVal);</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(len);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					sort1()&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 使数组按照字符编码默认从小到大排序,成功返回排序后的数组</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> sortJiShu = <span class="keyword">this</span>.jiShu.sort()</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(sortJiShu);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					reverse1()&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">//  将数组倒序，成功返回倒序后的数组</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> reverseiShu = <span class="keyword">this</span>.jiShu.reverse();</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(reverseiShu);</span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 定义：在执行Vud代码之前先过滤一下，比如单位转换、数字打点、文本格式化</span><br><span class="line"></span><br><span class="line">2. 分类</span><br><span class="line">	全局过滤器：定义在new Vue 之前</span><br><span class="line">		&#123;&#123;msg | 过滤器名称&#125;&#125;  Vue.filter(过滤器名称，function(value)&#123;函数处理&#125;)</span><br><span class="line">	本地过滤器：定义在new Vue中的filters</span><br><span class="line">		&#123;&#123;msg | 过滤器名称&#125;&#125; filters:&#123;过滤器名称(value)&#123;函数处理&#125;&#125;</span><br><span class="line">	串联过滤器</span><br><span class="line">		&#123;&#123;msg | 前缀名称 | 后缀名称&#125;&#125;	过滤器的处理全局和本地随便选一个即可</span><br><span class="line">	过滤器传参</span><br><span class="line">		&#123;&#123;msg | 过滤器名称(param1,param2...)&#125;&#125; function(value,param1,param2...)&#123;函数处理&#125;</span><br><span class="line"></span><br><span class="line">3. 案例</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 全局过滤器 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &#123;&#123;message | toAdd&#125;&#125; --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 本地过滤器 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &#123;&#123;message2 | Reverse&#125;&#125; --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 串联过滤器 --&gt;</span></span><br><span class="line">			&#123;&#123;money | prefix | suffix | a&#125;&#125;</span><br><span class="line">			<span class="comment">&lt;!-- 传参数 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &#123;&#123;total | Add(10,20)&#125;&#125; --&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Vue.filter(名称,处理函数)</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 作用：给后面所有的Vue实例添加一个过滤器</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 注意 必须在Vue实例的前面</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Vue.filter("toAdd",function(value)&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	return "Vue" + value;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// &#125;);</span></span></span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">// 串联过滤器</span></span></span><br><span class="line"><span class="actionscript">			Vue.filter(<span class="string">"prefix"</span>,<span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> <span class="string">"$"</span> + value;</span></span><br><span class="line">			&#125;);</span><br><span class="line"><span class="actionscript">			Vue.filter(<span class="string">"suffix"</span>,<span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> value + <span class="string">"刀"</span></span></span><br><span class="line">			&#125;);</span><br><span class="line"><span class="actionscript">			Vue.filter(<span class="string">"a"</span>,<span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> value + <span class="string">"111"</span></span></span><br><span class="line">			&#125;);	</span><br><span class="line"><span class="actionscript">			<span class="comment">// 过滤器传参数</span></span></span><br><span class="line"><span class="actionscript">			Vue.filter(<span class="string">"Add"</span>,<span class="function"><span class="keyword">function</span><span class="params">(value,param1,param2)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> value + param1 + param2;</span></span><br><span class="line">			&#125;)</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;</span><br><span class="line"><span class="actionscript">					message:<span class="string">"过滤器"</span>,</span></span><br><span class="line"><span class="actionscript">					message2:<span class="string">"reverse"</span>,</span></span><br><span class="line">					money:100,</span><br><span class="line">					total:0,</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				<span class="comment">// 本地过滤器</span></span></span><br><span class="line">				filters:&#123;</span><br><span class="line"><span class="actionscript">					<span class="comment">// 翻转</span></span></span><br><span class="line"><span class="actionscript">					Reverse:<span class="function"><span class="keyword">function</span><span class="params">(value)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> value.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件***"></a>Vue 组件***</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 定义：就是自定义标签，给他赋予一些意义，一般来说一个组件一个页面，可能简化了开发吧</span><br><span class="line"></span><br><span class="line">2. 分类</span><br><span class="line">	全局组件</span><br><span class="line">		使用：<span class="tag">&lt;<span class="name">组件名称</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名称</span>&gt;</span></span><br><span class="line">		定义：Vue.component("组件名",&#123;template:"html代码"&#125;)</span><br><span class="line">	局部组件</span><br><span class="line">		使用：<span class="tag">&lt;<span class="name">组件名称</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名称</span>&gt;</span></span><br><span class="line">		定义：var obj = &#123;template:"html代码"&#125;</span><br><span class="line">			 var v2 = new Vue(&#123;</span><br><span class="line">				el:"#app",</span><br><span class="line">				components:&#123;</span><br><span class="line">					Good:obj</span><br><span class="line">			 	&#125;</span><br><span class="line">			 &#125;)	</span><br><span class="line">	组件模板</span><br><span class="line">		使用：<span class="tag">&lt;<span class="name">组件名称</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名称</span>&gt;</span></span><br><span class="line">		定义：(1)<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myNba"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">					模板内容</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			 <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">			 (2)var obj = &#123;template:"#myNba"&#125;</span><br><span class="line">			 (3)var v2 = new Vue(&#123;</span><br><span class="line">				el:"#app",</span><br><span class="line">				components:&#123;</span><br><span class="line">					Good:obj</span><br><span class="line">			 	&#125;</span><br><span class="line">			 &#125;)	</span><br><span class="line">			</span><br><span class="line">	父子组件通信</span><br><span class="line">		父子组件就是父组件定义模板的时候里面又用了组件模板</span><br><span class="line">		父组件给子组件通信</span><br><span class="line">			(1) 父组件传递信息</span><br><span class="line">				<span class="tag">&lt;<span class="name">pic</span> <span class="attr">msg1</span>=<span class="string">'KA'</span>&gt;</span><span class="tag">&lt;/<span class="name">pic</span>&gt;</span>// 这是父组件中的子组件</span><br><span class="line">			(2) 子组件接受信息</span><br><span class="line">				pic:&#123;</span><br><span class="line">                    // 获取父组件传递的信息 &#123;&#123;msg1&#125;&#125;</span><br><span class="line">                    template: `</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                            我是子组件，我能获取父组件传递的数据：&#123;&#123;msg1&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span><br><span class="line">                    props:['msg1'],// 接受父组件传递的信息</span><br><span class="line">				&#125;</span><br><span class="line">		子组件给父组件通信</span><br><span class="line">			(1) 子组件传递信息</span><br><span class="line">				// 父组件</span><br><span class="line">				var obj = &#123;</span><br><span class="line">				template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>",</span><br><span class="line">				data()&#123;</span><br><span class="line">					return&#123;</span><br><span class="line">						msg2:''</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					// 接受子组件消息</span><br><span class="line">					get(msg2)&#123;</span><br><span class="line">						return this.msg2 = msg2;</span><br><span class="line">					&#125;,</span><br><span class="line">					</span><br><span class="line">				&#125;,</span><br><span class="line">				components:&#123;</span><br><span class="line">					pic:&#123;</span><br><span class="line">						// 获取父组件传递的信息 &#123;&#123;msg1&#125;&#125;</span><br><span class="line">						template: `</span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"给父组件发数据"</span> @<span class="attr">click</span>=<span class="string">"send"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span><br><span class="line">						data()&#123;</span><br><span class="line">							return&#123;</span><br><span class="line">								msg2:'我是子组件发送的信息'</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;,</span><br><span class="line">						methods:&#123;</span><br><span class="line">							send()&#123;</span><br><span class="line">								// 子组件发送数据到父组件当中</span><br><span class="line">								this.$emit('childmsg', this.msg2);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			(2) 父组件接受信息</span><br><span class="line">				<span class="tag">&lt;<span class="name">pic</span> @<span class="attr">childmsg</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;/<span class="name">pic</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3. 注意：</span><br><span class="line">	1. template中只能有一个根元素</span><br><span class="line">	2. 定义的组件中也可以使用new Vue中的一些指令，比如data，methods等</span><br><span class="line">	3. 使用data的时候和new Vue 不同 变成了 data()&#123;return 变量名1：变量值，变量名2：变量值&#125;</span><br><span class="line"></span><br><span class="line">4. 案例</span><br><span class="line">// 全局组件+局部组件</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- James标签 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 全局组件 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;James&gt;&lt;/James&gt;</span></span><br><span class="line"><span class="comment">			&lt;Kaluso&gt;&lt;/Kaluso&gt;</span></span><br><span class="line"><span class="comment">			&lt;Happy&gt;&lt;/Happy&gt; --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 局部组件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Good</span>&gt;</span><span class="tag">&lt;/<span class="name">Good</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">/* 注册组件+创建组件实例+默认挂在到当前实例化的Vue中 */</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Vue.component("标签名",组件构造器);</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Vue.component("James",&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 注意template 必须只有一个根元素</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			// 	template:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/team_01.png"</span> &gt;</span>'</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Vue.component("Kaluso",&#123;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			// 	template:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/defen_01.png"</span> &gt;</span>'</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// // 组件也可用Vue实例中的属性方法 eg methods data</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// Vue.component("Happy",&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// 注意 符号！！！</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	template:</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			// 	`<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"#demo"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			// 		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是James<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			// 		</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	 &lt;/div&gt;`,</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// 组件中的data 必须是函数</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	data()&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		return&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			num:1,</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	&#125;,</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	methods:&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		add()&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			this.num++</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// var v1 = new Vue(&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	el:"#app",</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// &#125;)</span></span></span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> obj = &#123;</span></span><br><span class="line">				template:</span><br><span class="line"><span class="handlebars"><span class="xml">				`<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"#demo"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是James<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">				data()&#123;</span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line">						num:1,</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.num++</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				components:&#123;</span><br><span class="line">					Good:obj</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 组件模板</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 组件模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">James</span>&gt;</span><span class="tag">&lt;/<span class="name">James</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Ka</span>&gt;</span>12<span class="tag">&lt;/<span class="name">Ka</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 组件模板 外部一定要加div 并且只能有一个根元素--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myNba"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是勒布朗·詹姆斯<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>联盟现役第一人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/defen_01.png"</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					打钱:&#123;&#123;num&#125;&#125;</span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myNba2"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Ka<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>联盟现役第一人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/defen_01.png"</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					打钱:&#123;&#123;num&#125;&#125;</span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> obj1 = &#123;</span></span><br><span class="line"><span class="actionscript">				template:<span class="string">"#myNba"</span>,</span></span><br><span class="line">				data()&#123;</span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line">						num:1,</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.num++</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> obj2 = &#123;</span></span><br><span class="line"><span class="actionscript">				template:<span class="string">"#myNba2"</span>,</span></span><br><span class="line">				data()&#123;</span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line">						num:1,</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.num++</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				components:&#123;</span><br><span class="line">					James:obj1,</span><br><span class="line">					Ka:obj2,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父子组件通信</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>父子组件 + 父子传递<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Nba</span>&gt;</span><span class="tag">&lt;/<span class="name">Nba</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myNba"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件,接受子组件传递的信息:&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是勒布朗·詹姆斯<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span>联盟现役第一人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/defen_01.png"</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">					打钱:&#123;&#123;num&#125;&#125;</span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 子组件 + 父组件传递信息(msg 是父组件给子组件传递的信息) --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">pic</span> @<span class="attr">childmsg</span>=<span class="string">"get"</span> <span class="attr">msg1</span>=<span class="string">'KA'</span>&gt;</span><span class="tag">&lt;/<span class="name">pic</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="actionscript">				template:<span class="string">"#myNba"</span>,</span></span><br><span class="line">				data()&#123;</span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span>&#123;</span></span><br><span class="line">						num:1,</span><br><span class="line"><span class="actionscript">						msg2:<span class="string">''</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					add()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.num++</span></span><br><span class="line">					&#125;,</span><br><span class="line"><span class="javascript">					<span class="keyword">get</span>(msg2)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="keyword">this</span>.msg2 = msg2;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					</span><br><span class="line">				&#125;,</span><br><span class="line">				components:&#123;</span><br><span class="line">					pic:&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 获取父组件传递的信息 &#123;&#123;msg1&#125;&#125;</span></span></span><br><span class="line">						template: `</span><br><span class="line"><span class="handlebars"><span class="xml">							<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">								我是子组件，我能获取父组件传递的数据：</span><span class="template-variable">&#123;&#123;msg1&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"给父组件发数据"</span> @<span class="attr">click</span>=<span class="string">"send"</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="actionscript">						props:[<span class="string">'msg1'</span>],<span class="comment">// 接受父组件传递的信息</span></span></span><br><span class="line">						data()&#123;</span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">								msg2:<span class="string">'我是子组件发送的信息'</span></span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;,</span><br><span class="line">						methods:&#123;</span><br><span class="line">							send()&#123;</span><br><span class="line"><span class="actionscript">								<span class="comment">// 子组件发送数据到父组件当中</span></span></span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.$emit(<span class="string">'childmsg'</span>, <span class="keyword">this</span>.msg2);</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				components:&#123;</span><br><span class="line">					Nba:obj,</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-路由"><a href="#Vue-路由" class="headerlink" title="Vue 路由***"></a>Vue 路由***</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 定义：因为Vue是SPA(single page application)单页面应用，只有一个页面没法跳转不同的组件，这时候路由就出现了，哈哈</span><br><span class="line"></span><br><span class="line">2. 分类</span><br><span class="line">	路由的两种方式（声明式导航/）</span><br><span class="line">		基本思路都是：定义路由组件=》绑定地址=》定义路由实例=》定义Vue实例绑定路由</span><br><span class="line">		区别：基本路由是用router-link来跳转组件的类似于超链接</span><br><span class="line">			 js路由相当于用方法触发的，并且是用this.$router.push('/Home');这种方式跳转的</span><br><span class="line">	路由之间的嵌套</span><br><span class="line">		就是在组件中又嵌套了路由</span><br><span class="line">	路由的导航守卫</span><br><span class="line">		作用就是在路由之前加点业务逻辑，例如当跳转首页的时候是否已经登录了等等</span><br><span class="line">		写法：router.beforeEach((to, from, next)=&gt;&#123;业务逻辑&#125;)</span><br><span class="line">	路由的传参</span><br><span class="line">		params方式 类似于post</span><br><span class="line">		query方式  类似于get</span><br><span class="line">	路由的监听</span><br><span class="line">		var v1 = new Vue(&#123;</span><br><span class="line">				el:"#app",</span><br><span class="line">				data:&#123;&#125;,</span><br><span class="line">				router,</span><br><span class="line">				watch: &#123;</span><br><span class="line">					// 监听路由跳转。</span><br><span class="line">					$route(newRoute, oldRoute) &#123;</span><br><span class="line">						console.log('watch', newRoute, oldRoute)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">3. 案例</span><br><span class="line">// 路由的两种方式-基本</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 路由<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入在线Vuejs --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意 引入Vuejs路由源代码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- router link组件来导航 to指向地址 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/News"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Login"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">/* 一、定义路由组件 */</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Home = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span>Home首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> News = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span>New新闻<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Login = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span>Login登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">/* 二、定义路由规则对象 一个路由对应一个组件 */</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> routes = [</span></span><br><span class="line"><span class="actionscript">				<span class="comment">/* 注册组件 创建路径 */</span></span></span><br><span class="line">				&#123;	</span><br><span class="line"><span class="actionscript">					<span class="comment">/* 设置默认页面 路由重定向 */</span></span></span><br><span class="line"><span class="actionscript">					path:<span class="string">"/"</span>,<span class="comment">// 根目录</span></span></span><br><span class="line"><span class="actionscript">					redirect: <span class="string">'/Login'</span>,<span class="comment">// 重定向</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/Home"</span>,</span></span><br><span class="line">					component: Home,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/News"</span>,</span></span><br><span class="line">					component: News,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/Login"</span>,</span></span><br><span class="line">					component: Login,</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line"><span class="actionscript">			<span class="comment">/* 3 创建路由实例 */</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">// key:value</span></span></span><br><span class="line">				routes:routes</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">/* 4 创建vue实例 */</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;&#125;,</span><br><span class="line"><span class="actionscript">				<span class="comment">// 加入路由</span></span></span><br><span class="line">				router</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 路由的两种方式-js</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js 路由跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入在线Vuejs --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意 引入Vuejs路由源代码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toHome"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toNews"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toLogin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toForward1"</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toForward2"</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toBack2"</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toBack1"</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!--1. 定义路由组件--&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Home = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> News = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>News </span><span class="template-variable">&#123;&#123;$route.query.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Login = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!--2. 绑定路径--&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> routes = [</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/"</span>,</span></span><br><span class="line"><span class="actionscript">					redirect:<span class="string">"/Home"</span>,</span></span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/Home"</span>,</span></span><br><span class="line">					component:Home,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/News"</span>,</span></span><br><span class="line">					component:News,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">"/Login"</span>,</span></span><br><span class="line">					component:Login,</span><br><span class="line">				&#125;,</span><br><span class="line">			]</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!--3. 创建路由实例--&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">				routes</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!--4. 创建Vue实例--&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;&#125;,</span><br><span class="line">				router,</span><br><span class="line">				methods:&#123;</span><br><span class="line">					toHome()&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 无参数</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.push(<span class="string">'/Home'</span>);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					toNews()&#123;</span><br><span class="line"><span class="actionscript">						<span class="comment">// 有参数</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.push(&#123;path:<span class="string">'/News'</span>,query:&#123;name:<span class="string">'zs'</span>&#125;&#125;);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					toLogin()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.push(<span class="string">'/Login'</span>);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					toForward1()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.forward();</span></span><br><span class="line">					&#125;,</span><br><span class="line">					toForward2()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.go(<span class="number">2</span>);</span></span><br><span class="line">					&#125;,</span><br><span class="line">					toBack1()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.back();</span></span><br><span class="line">					&#125;,</span><br><span class="line">					toBack2()&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				watch: &#123;</span><br><span class="line"><span class="actionscript">					<span class="comment">// 监听路由跳转。</span></span></span><br><span class="line">					$route(newRoute, oldRoute) &#123;</span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="string">'watch'</span>, newRoute, oldRoute)</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 路由之间的嵌套</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 嵌套路由<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入在线Vuejs --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意 引入Vuejs路由源代码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- router link组件来导航 to指向地址 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/News"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Login"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 定义路由组件 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Home = &#123;</span></span><br><span class="line">				template:`</span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎来到首页!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Home/Login"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Home/Register"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">				`</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Login = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Register = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 2. 定义路由规则对象 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> routes = [</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">'/'</span>,</span></span><br><span class="line"><span class="actionscript">					redirect:<span class="string">'/Home'</span>,</span></span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">'/Home'</span>,</span></span><br><span class="line">					component:Home,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">'/Home/Login'</span>,</span></span><br><span class="line">					component:Login,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					path:<span class="string">'/Home/Register'</span>,</span></span><br><span class="line">					component:Register,</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 3. 创建路由实例 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">				routes:routes</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 4. 创建Vue实例 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;&#125;,</span><br><span class="line">				router:router,</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 路由的导航守卫</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue 导航守卫<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入在线Vuejs --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意 引入Vuejs路由源代码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 导航守卫 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 作用:跳转前的验证 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/News"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Music"</span>&gt;</span>Music<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/Login"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 1. 定义路由组件 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Home = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> News = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Music = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Login = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 2. 映射地址 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> routes = [</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					name:<span class="string">'Home'</span>,</span></span><br><span class="line"><span class="actionscript">					path:<span class="string">'/Home'</span>,</span></span><br><span class="line">					component:Home,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					name:<span class="string">'News1'</span>,</span></span><br><span class="line"><span class="actionscript">					path:<span class="string">'/News'</span>,</span></span><br><span class="line">					component:News,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;	</span><br><span class="line"><span class="actionscript">					name:<span class="string">'Music'</span>,</span></span><br><span class="line"><span class="actionscript">					path:<span class="string">'/Music'</span>,</span></span><br><span class="line">					component:Music,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					name:<span class="string">'Login'</span>,</span></span><br><span class="line"><span class="actionscript">					path:<span class="string">'/Login'</span>,</span></span><br><span class="line">					component:Login,</span><br><span class="line">				&#125;,</span><br><span class="line">			]</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 3. 创建路由实例 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">// routes:routes</span></span></span><br><span class="line"><span class="actionscript">				routes<span class="comment">// 缩写</span></span></span><br><span class="line">			&#125;)</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 4. 创建Vue实例 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#box"</span>,</span></span><br><span class="line">				data:&#123;&#125;,</span><br><span class="line">				router</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="comment">&lt;!-- 重点 添加全局路由守卫 --&gt;</span></span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// (参数)=&gt;&#123;函数&#125; 箭头函数(ES6) 等价于function</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 用name拦截</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// router.beforeEach((to, from, next)=&gt;&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// to: 即将进入的路由对象 到哪去</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// form: 要离开的路由对象 从哪来</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// next: 下一步操作</span></span></span><br><span class="line">				</span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// 准备访问的组件</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	var nextRoute = ['News1','Music'];</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// 设置一 登录状态 </span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	var isLogin = false;// 默认不可以跳转</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// 判断要跳转的路由名称是不是在我规定范围之内</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	if (nextRoute.indexOf(to.name) &gt;= 0)&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		// 未登录</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		if (!isLogin)&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			alert("what fuck!");</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			router.push(&#123;name:'Login'&#125;);// 跳转到Login</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			location.reload();//提交路径	</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	// 请求到Login</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	if (to.name == "Login")&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		// 登录成功 跳转到Home</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		if (isLogin)&#123;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			router.push(&#123;name:"Home"&#125;);</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 			location.reload();</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 		&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	&#125;</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	/* 继续往下执行 */</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 	next();</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// &#125;)</span></span></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">// 另一种方式 利用path拦截</span></span></span><br><span class="line"><span class="javascript">			router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> nextRoute = [<span class="string">'/News'</span>,<span class="string">'/Music'</span>];</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> isLogin = <span class="literal">false</span>;</span></span><br><span class="line">				if (nextRoute.indexOf(to.path) &gt;= 0)&#123;</span><br><span class="line">					if (!isLogin)&#123;</span><br><span class="line">						router.push(&#123;</span><br><span class="line"><span class="actionscript">							path:<span class="string">'/Login'</span>,</span></span><br><span class="line">						&#125;)</span><br><span class="line">						location.reload();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="keyword">if</span> (to.path === <span class="string">"/Login"</span>)&#123;</span></span><br><span class="line">					if (isLogin)&#123;</span><br><span class="line">						router.push(&#123;</span><br><span class="line"><span class="actionscript">							path:<span class="string">"/Home"</span>,</span></span><br><span class="line">						&#125;)</span><br><span class="line">						location.reload();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				next();</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 路由的传参</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>路由传参<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入在线Vuejs --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注意 引入Vuejs路由源代码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 注意to 变成了:to --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'home',params:&#123;msg:'params我是路由传递的参数'&#125;&#125;"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'news',query:&#123;msg:'query我是路由传递的参数'&#125;&#125;"</span>&gt;</span>news<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 创建路由组件</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> Home = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;$route.params.msg&#125;&#125;</span><span class="xml">Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> News = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				template:"<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;$route.query.msg&#125;&#125;</span><span class="xml">Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">// 绑定路径</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> routes=[</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					name:<span class="string">"home"</span>,</span></span><br><span class="line"><span class="actionscript">					path:<span class="string">"/home"</span>,</span></span><br><span class="line">					component:Home,</span><br><span class="line">				&#125;,</span><br><span class="line">				&#123;</span><br><span class="line"><span class="actionscript">					name:<span class="string">"news"</span>,</span></span><br><span class="line"><span class="actionscript">					path:<span class="string">"/news"</span>,</span></span><br><span class="line">					component:News,</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line"><span class="actionscript">			<span class="comment">// 创建路由实例</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">				routes</span><br><span class="line">			&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">// 创建Vue实例 绑定路由</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> v1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el:<span class="string">"#app"</span>,</span></span><br><span class="line">				data:&#123;&#125;,</span><br><span class="line">				router</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>weChat</title>
    <url>/2020/08/30/weChat/</url>
    <content><![CDATA[<h1 id="一、云开发"><a href="#一、云开发" class="headerlink" title="一、云开发"></a>一、云开发</h1><h2 id="1、云开发初始化—yun0813"><a href="#1、云开发初始化—yun0813" class="headerlink" title="1、云开发初始化—yun0813"></a>1、云开发初始化—yun0813</h2><h3 id="1-开通云开发"><a href="#1-开通云开发" class="headerlink" title="(1) 开通云开发"></a>(1) 开通云开发</h3><ul>
<li>界面==》云开发==》开通</li>
</ul>
<h3 id="2-创建云目录"><a href="#2-创建云目录" class="headerlink" title="(2) 创建云目录"></a>(2) 创建云目录</h3><ul>
<li><p>project.config.json文件中添加配置(description的下面) <strong>带“/”</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"cloudfunctionRoot": "/cloud"</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建目录</p>
<ul>
<li>+==》目录==》cloud</li>
</ul>
<p><img src= "/img/loading.gif" data-src="/2020/08/30/weChat/image_01.png" alt></p>
</li>
</ul>
<h3 id="3-配置云开发环境初始化"><a href="#3-配置云开发环境初始化" class="headerlink" title="(3) 配置云开发环境初始化"></a>(3) 配置云开发环境初始化</h3><ul>
<li><p>位置：app.js</p>
</li>
<li><p>配置代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云开发初始化</span></span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env:<span class="string">"codemao-7hcrz"</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/08/30/weChat/image_02.png" alt></p>
</li>
</ul>
<h2 id="2、云数据库的增删改查—yun0609"><a href="#2、云数据库的增删改查—yun0609" class="headerlink" title="2、云数据库的增删改查—yun0609"></a>2、云数据库的增删改查—yun0609</h2><h3 id="1-云开发初始化"><a href="#1-云开发初始化" class="headerlink" title="(1) 云开发初始化"></a>(1) 云开发初始化</h3><h3 id="2-增、删、改、查"><a href="#2-增、删、改、查" class="headerlink" title="(2) 增、删、改、查"></a>(2) 增、删、改、查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 添加注释 --&gt;</span><br><span class="line">&lt;input placeholder&#x3D;&quot;输入名字&quot; bindinput&#x3D;&quot;addName&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">&lt;input placeholder&#x3D;&quot;输入年龄&quot; bindinput&#x3D;&quot;addAge&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">&lt;button bindtap &#x3D; &quot;addData&quot; type&#x3D;&quot;primary&quot;&gt;添加数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button bindtap &#x3D; &quot;getData&quot; type&#x3D;&quot;primary&quot;&gt;查询数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- 删除数据 --&gt;</span><br><span class="line">&lt;input placeholder&#x3D;&quot;请输入要输入的ID&quot; bindinput&#x3D;&quot;delDataInput&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">&lt;button bindtap &#x3D; &quot;delData&quot; type&#x3D;&quot;primary&quot;&gt;删除数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- 更新数据 --&gt;</span><br><span class="line">&lt;input placeholder&#x3D;&quot;请输入想要更新的ID&quot; bindinput&#x3D;&quot;udpDataInput&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">&lt;input placeholder&#x3D;&quot;请输入更新的年龄&quot; bindinput&#x3D;&quot;udpAge&quot;&gt;&lt;&#x2F;input&gt; </span><br><span class="line">&lt;button bindtap &#x3D; &quot;udpData&quot; type&#x3D;&quot;primary&quot;&gt;更新数据&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DB = wx.cloud.database().collection(<span class="string">"list"</span>)</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">""</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="string">""</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="string">""</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">// 获取用户输入的name</span></span><br><span class="line">  addName(event)&#123;</span><br><span class="line">    name = event.detail.value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取用户输入的age</span></span><br><span class="line">  addAge(event) &#123;</span><br><span class="line">    age = event.detail.value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 要删除的ID</span></span><br><span class="line">  delDataInput(event)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"要删除的id"</span>,event.detail.value)</span><br><span class="line">    id = event.detail.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 要更新的ID</span></span><br><span class="line">  udpDataInput(event) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"要删除的id"</span>, event.detail.value)</span><br><span class="line">    id = event.detail.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 要更新的年龄</span></span><br><span class="line">  udpAge(event) &#123;</span><br><span class="line">    age = event.detail.value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 添加数据</span></span><br><span class="line">  addData()&#123;</span><br><span class="line">    DB.add(&#123;</span><br><span class="line">      data:&#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: age</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"添加成功"</span>,res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"添加失败"</span>,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 删除数据</span></span><br><span class="line">  delData() &#123;</span><br><span class="line">    DB.doc(id).remove(&#123;</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"删除成功"</span>, res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"删除数据失败"</span>, res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 查询数据</span></span><br><span class="line">  getData()&#123;</span><br><span class="line">    DB.get(&#123;</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询数据成功"</span>, res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询数据失败"</span>, res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  udpData()&#123;</span><br><span class="line">    DB.doc(id).update(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        age: age</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"更新成功"</span>, res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"更新失败"</span>, res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-直接获取云数据库的缺点"><a href="#3-直接获取云数据库的缺点" class="headerlink" title="(3) 直接获取云数据库的缺点"></a>(3) 直接获取云数据库的缺点</h3><ol>
<li><p>会受到权限的限制，只能获取自己用直接添加的数据，不能获取到手动添加的数据</p>
</li>
<li><p>怎么解决？</p>
<ul>
<li><p>点击 云开发==》数据库-==》表名称==》权限设置改成第一个，所有用户可读写</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/30/weChat/image_03.png" alt></p>
</li>
</ul>
</li>
</ol>
<h2 id="3、云函数—yun0908"><a href="#3、云函数—yun0908" class="headerlink" title="3、云函数—yun0908"></a>3、云函数—yun0908</h2><h3 id="1-计算求和的云函数"><a href="#1-计算求和的云函数" class="headerlink" title="(1) 计算求和的云函数"></a>(1) 计算求和的云函数</h3><ul>
<li><p>云函数初始化</p>
</li>
<li><p>创建云文件夹</p>
<ul>
<li><p>+==》目录==》cloud</p>
</li>
<li><p>配置project.config.json文件中添加配置(description的下面) <strong>带“/”</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"cloudfunctionRoot": "/cloud"</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建云函数（add）</p>
<ul>
<li>右键cloud==》新建node.js云函数</li>
</ul>
</li>
<li><p>编写云函数</p>
<ul>
<li><p>书写代码—add/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = event.a;</span><br><span class="line">  <span class="keyword">let</span> b = event.b;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传云函数</p>
<ul>
<li>右键add==&gt;上传并部署云函数依赖不上传node…</li>
</ul>
</li>
</ul>
</li>
<li><p>调用云函数 wx.cloud.callFunction({})</p>
<ul>
<li><p>pages/index/index.wxml</p>
</li>
<li><p>pages/index/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"qiuhe"</span>&gt;云函数获取加法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><br><span class="line"><span class="regexp">Page(&#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 第一个云函数</span></span><br><span class="line"><span class="regexp">  qiuhe()&#123;</span></span><br><span class="line"><span class="regexp">    wx.cloud.callFunction(&#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 云函数的名称</span></span><br><span class="line"><span class="regexp">      name:"add",</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 和云函数接受的数据保持一致</span></span><br><span class="line"><span class="regexp">      data:&#123;</span></span><br><span class="line"><span class="regexp">        a: 9,</span></span><br><span class="line"><span class="regexp">        b: 3</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      success(res)&#123;</span></span><br><span class="line"><span class="regexp">        console.log("请求成功",res)</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      fail(res)&#123;</span></span><br><span class="line"><span class="regexp">        console.log("请求失败",res)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h3 id="2-获取小程序用户的openid"><a href="#2-获取小程序用户的openid" class="headerlink" title="(2) 获取小程序用户的openid"></a>(2) 获取小程序用户的openid</h3><ol>
<li><p>云函数初始化</p>
</li>
<li><p>新建云函数文件并配置json文件</p>
</li>
<li><p>新建node.js函数—默认就是获取用户openid</p>
<ul>
<li>右键cloud==》新建node.js文件==》取名叫getopenid</li>
</ul>
</li>
<li><p>调用云函数文件wx.cloud.callFunction</p>
<ul>
<li>位置：pages/index/index.js+index.wxml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;index.wxml</span><br><span class="line">&lt;button bindtap&#x3D;&quot;getOpenId&quot;&gt;获取用户openid&lt;&#x2F;button&gt;</span><br><span class="line">&#x2F;&#x2F;index.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  &#x2F;&#x2F; 获取用户openid</span><br><span class="line">  getOpenId()&#123;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name:&quot;getopenid&quot;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        console.log(&quot;获取openid成功&quot;,res.result.openid)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        console.log(&quot;获取openid失败&quot;,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>获取openid的作用</p>
<ul>
<li>可以唯一标识用户</li>
</ul>
</li>
<li><p>唯一表示用户的方法</p>
<ul>
<li>用户的手机号</li>
<li>openid</li>
</ul>
</li>
</ol>
<h3 id="3-利用云函数获取数据库数据"><a href="#3-利用云函数获取数据库数据" class="headerlink" title="(3) 利用云函数获取数据库数据"></a>(3) 利用云函数获取数据库数据</h3><ol>
<li><p>为什么要用云函数获取数据那？</p>
<ul>
<li>云函数获取数据库数据可以突破20条的限制</li>
<li>云函数获取数据库不受数据库表的权限控制</li>
<li>云函数可以实现的功能更多</li>
</ul>
</li>
<li><p>云函数获取数据的具体流程</p>
<ul>
<li><p>云开发初始化+创建云开发文件并配置</p>
</li>
<li><p>新建云函数文件==》getshuju</p>
</li>
<li><p>编写云函数文件==》getshuju/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"><span class="comment">// 如果报找不到资源的错误就在写一下环境ID</span></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: <span class="string">"codemao-7hcrz"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> cloud.database().collection(<span class="string">"users"</span>).get(&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<pre><code>- 调用云函数文件==》pages/index/index.js

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"yunhanshu"</span>&gt;云函数获取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><br><span class="line"><span class="regexp">Page(&#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 云函数获取数据</span></span><br><span class="line"><span class="regexp">  yunhanshu()&#123;</span></span><br><span class="line"><span class="regexp">    wx.cloud.callFunction(&#123;</span></span><br><span class="line"><span class="regexp">      name: "getshuju",</span></span><br><span class="line"><span class="regexp">      success(res)&#123;</span></span><br><span class="line"><span class="regexp">        console.log("云函数获取数据成功", res.result.data)</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      fail(res)&#123;</span></span><br><span class="line"><span class="regexp">        console.log("云函数获取数据失败",res)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="4、云存储—test1013"><a href="#4、云存储—test1013" class="headerlink" title="4、云存储—test1013"></a>4、云存储—test1013</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="(1) 作用"></a>(1) 作用</h3><pre><code>1. 存储各种文件，并下载</code></pre><h3 id="2-选择并上传到云存储图片并展示"><a href="#2-选择并上传到云存储图片并展示" class="headerlink" title="(2) 选择并上传到云存储图片并展示"></a>(2) 选择并上传到云存储图片并展示</h3><ol>
<li><p>配置云开发环境(init)</p>
</li>
<li><p>选择图片page/index/index.wxml+index.js</p>
<ul>
<li><p>wxml</p>
</li>
<li><p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"upload"</span>&gt;上传图片&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;image src="&#123;&#123;imgUrl&#125;&#125;"&gt;&lt;/im</span>age&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    imgUrl: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 选择文件</span></span><br><span class="line">  upload()&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 官方文档  API==》媒体==》图片==》chooseimage 复制的</span></span><br><span class="line">    <span class="comment">//https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html</span></span><br><span class="line">    wx.chooseImage(&#123;</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">      sizeType: [<span class="string">'original'</span>, <span class="string">'compressed'</span>],</span><br><span class="line">      sourceType: [<span class="string">'album'</span>, <span class="string">'camera'</span>],</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"选择成功"</span>, res)</span><br><span class="line">        that.uploadImg(res.tempFilePaths[<span class="number">0</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传图片</span></span><br><span class="line">  uploadImg(fileUrl)&#123;</span><br><span class="line">    <span class="comment">// 官方文档==》云开发==》存储==》API</span></span><br><span class="line">    <span class="comment">// https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/storage/api.html</span></span><br><span class="line">    wx.cloud.uploadFile(&#123;</span><br><span class="line">      <span class="comment">// js获取时间戳</span></span><br><span class="line">      cloudPath: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">'codemao.png'</span>, <span class="comment">// 上传至云端的路径</span></span><br><span class="line">      filePath: fileUrl, <span class="comment">// 小程序临时文件路径</span></span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 返回文件 ID</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"上传成功"</span>,res.fileID)</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">          imgUrl: res.fileID</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="built_in">console</span>.error</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<h3 id="3-选择视频并上传到云储存"><a href="#3-选择视频并上传到云储存" class="headerlink" title="(3) 选择视频并上传到云储存"></a>(3) 选择视频并上传到云储存</h3><ol>
<li><p>云开发环境初始化</p>
</li>
<li><p>选择视频并上传到云存储</p>
</li>
<li><p>展示图片</p>
<ul>
<li><p>wxml和js==&gt;page/index/index.wxml+index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"uploadVideo"</span>&gt;上传视频&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;video src="&#123;&#123;videoUrl&#125;&#125;" controls="false"&gt;&lt;/</span>video&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    videoUrl: <span class="string">"cloud://codemao-7hcrz.636f-codemao-7hcrz-1301171692/视频.mp4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  uploadVideo()&#123;</span><br><span class="line">    <span class="comment">// 官方文档==》API==&gt;媒体==》视频</span></span><br><span class="line">    <span class="comment">// https://developers.weixin.qq.com/miniprogram/dev/api/media/video/wx.chooseVideo.html</span></span><br><span class="line">    wx.chooseVideo(&#123;</span><br><span class="line">      sourceType: [<span class="string">'album'</span>, <span class="string">'camera'</span>],</span><br><span class="line">      maxDuration: <span class="number">60</span>,<span class="comment">//视频时长 s</span></span><br><span class="line">      camera: <span class="string">'back'</span>,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"选择视频成功"</span>, res.tempFilePath)</span><br><span class="line">        wx.cloud.uploadFile(&#123;</span><br><span class="line">          <span class="comment">// js获取时间戳</span></span><br><span class="line">          cloudPath: <span class="string">'视频.mp4'</span>, <span class="comment">// 上传至云端的路径</span></span><br><span class="line">          filePath: res.tempFilePath, <span class="comment">// 小程序临时文件路径</span></span><br><span class="line">          success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 返回文件 ID</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"上传视频成功"</span>, res.fileID)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="built_in">console</span>.error</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4、选择文件（excel）上传到云存储并打开"><a href="#4、选择文件（excel）上传到云存储并打开" class="headerlink" title="4、选择文件（excel）上传到云存储并打开"></a>4、选择文件（excel）上传到云存储并打开</h3><ol>
<li><p>初始化云函数</p>
</li>
<li><p>选择文件并上传到云存储</p>
</li>
<li><p>展示图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"uploadExcel"</span>&gt;上传excel文件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button bindtap="openExcel"&gt;下载并打开excel文件&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">// 下载并打开excel文件</span></span><br><span class="line">  openExcel()&#123;</span><br><span class="line">    <span class="comment">// 官方文档==》云开发==》存储==》API==&gt;downLoad</span></span><br><span class="line">    wx.cloud.downloadFile(&#123;</span><br><span class="line">      fileID: <span class="string">'cloud://codemao-7hcrz.636f-codemao-7hcrz-1301171692/aaa.xlsx'</span>, <span class="comment">// 文件 ID</span></span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 返回临时文件路径</span></span><br><span class="line">        <span class="built_in">console</span>.log(res.tempFilePath)</span><br><span class="line">        <span class="comment">// 打开文件</span></span><br><span class="line">        <span class="comment">//https://developers.weixin.qq.com/miniprogram/dev/api/file/wx.openDocument.html</span></span><br><span class="line">        wx.openDocument(&#123;</span><br><span class="line">          filePath: res.tempFilePath,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'打开文档成功'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="built_in">console</span>.error</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传excel文件</span></span><br><span class="line">  uploadExcel()&#123;</span><br><span class="line">    <span class="comment">// 官方文档==》API==》图片==》chooseMessageFile...</span></span><br><span class="line">    <span class="comment">//https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseMessageFile.html</span></span><br><span class="line">    <span class="comment">// 上传所有文件 例如 excel，word等等</span></span><br><span class="line">    wx.chooseMessageFile(&#123;</span><br><span class="line">     </span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">      type: <span class="string">'all'</span>,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"选择文件成功"</span>, res)</span><br><span class="line">        <span class="comment">// tempFilePath可以作为img标签的src属性显示图片</span></span><br><span class="line">        <span class="keyword">const</span> tempFilePaths = res.tempFiles[<span class="number">0</span>].path</span><br><span class="line">        wx.cloud.uploadFile(&#123;</span><br><span class="line">          cloudPath: <span class="string">'aaa.xlsx'</span>, <span class="comment">// 上传至云端的路径</span></span><br><span class="line">          filePath: tempFilePaths, <span class="comment">// 小程序临时文件路径</span></span><br><span class="line">          success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 返回文件 ID</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"上传文件成功"</span>, res.fileID)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="built_in">console</span>.error</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="5、列表展示—yun1112"><a href="#5、列表展示—yun1112" class="headerlink" title="5、列表展示—yun1112"></a>5、列表展示—yun1112</h2><h3 id="1-直接通过数据库获取数据的局限性-》page-index"><a href="#1-直接通过数据库获取数据的局限性-》page-index" class="headerlink" title="(1)  直接通过数据库获取数据的局限性==》page/index"></a>(1)  直接通过数据库获取数据的局限性==》page/index</h3><ol>
<li><p>获取数据库数据</p>
<ul>
<li>集合的名称是userlist</li>
</ul>
</li>
<li><p><strong>展示页面</strong>==》wx:for  item.age</p>
</li>
<li><p>缺点</p>
<ul>
<li>只能获取20条数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"getData"</span>&gt;获取云数据库数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;view wx:for="&#123;&#123;dataList&#125;&#125;"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;view class="itemRoot"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;view&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line">    &lt;view&gt;&#123;&#123;item._id&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;view&gt;&#123;&#123;item.address&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line">  &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wxss</span></span><br><span class="line">.itemRoot&#123;</span><br><span class="line">  background: gainsboro;</span><br><span class="line">  border: <span class="number">1</span>px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    dataList:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取云数据库数据</span></span><br><span class="line">  getData(res)&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.cloud.database().collection(<span class="string">"userlist"</span>).get(&#123;</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"获取数据成功"</span>,res)</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          dataList: res.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"获取数据失败"</span>,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="2-通过云函数获取数据库数据的局限性-gt-page-yun"><a href="#2-通过云函数获取数据库数据的局限性-gt-page-yun" class="headerlink" title="(2) 通过云函数获取数据库数据的局限性==&gt;page/yun"></a>(2) 通过云函数获取数据库数据的局限性==&gt;page/yun</h3><ol>
<li><p>获取数据库数据</p>
<ul>
<li>云函数的名称是getList</li>
<li>集合的名称是userlist</li>
</ul>
</li>
<li><p><strong>展示页面</strong></p>
</li>
<li><p>缺点</p>
<ul>
<li>只能获取100条数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//yun.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">"getData"</span>&gt;云函数获取云数据库数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;view wx:for="&#123;&#123;dataList&#125;&#125;" wx:key="item"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;view class="itemRoot"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;view&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line">    &lt;view&gt;&#123;&#123;item._id&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;view&gt;&#123;&#123;item.address&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line">  &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yun.wxss</span></span><br><span class="line">.itemRoot&#123;</span><br><span class="line">  background: gainsboro;</span><br><span class="line">  border: <span class="number">1</span>px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//yun.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    dataList: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取云数据库数据</span></span><br><span class="line">  getData(res) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.cloud.callFunction(&#123;</span><br><span class="line">      name: <span class="string">"getList"</span>,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>,res)</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          dataList: res.result.data</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>, res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//getList</span></span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: <span class="string">"codemao-7hcrz"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> cloud.database().collection(<span class="string">"userlist"</span>).get(&#123;</span><br><span class="line">    success(res)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"云函数获取数据成功"</span>,res)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail(res)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"云函数获取数据失败"</span>,res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="6、分页—分页"><a href="#6、分页—分页" class="headerlink" title="6、分页—分页"></a>6、分页—分页</h2><h3 id="1-核心"><a href="#1-核心" class="headerlink" title="(1) 核心"></a>(1) 核心</h3><ul>
<li>skip(数字)：从该数据之后开始显示</li>
<li>limit(数字)：限制多少数量</li>
<li>onReachBottom: function：页面上拉触发函数</li>
</ul>
<h3 id="2-实例"><a href="#2-实例" class="headerlink" title="(2) 实例"></a>(2) 实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env: <span class="string">"codemao-7hcrz"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;block wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span> wx:key=<span class="string">"index"</span>&gt;</span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;&#123;&#123;item.num&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>block&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wxss</span></span><br><span class="line">.item&#123;</span><br><span class="line">  border: <span class="number">1</span>px solid gainsboro;</span><br><span class="line">  height: <span class="number">80</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">let</span> totalNum = <span class="number">-1</span>;</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    list: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载数据</span></span><br><span class="line">  getDataList()&#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="keyword">this</span>.data.list.length;</span><br><span class="line">    <span class="keyword">if</span> (totalNum == len)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'数据加载完毕'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      title: <span class="string">'加载中'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"list的长度"</span>,len)</span><br><span class="line">    wx.cloud.database().collection(<span class="string">'list'</span>)</span><br><span class="line">    .skip(len)</span><br><span class="line">    .get()</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"获取成功"</span>, res)</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        list: <span class="keyword">this</span>.data.list.concat(res.data)</span><br><span class="line">      &#125;)</span><br><span class="line">      wx.hideLoading()</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"获取失败"</span>, res)</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'加载失败'</span>,</span><br><span class="line">        icon: none</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    wx.cloud.database().collection(<span class="string">'list'</span>).count()</span><br><span class="line">    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"数据总条数"</span>,res)</span><br><span class="line">      totalNum = res.total</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.getDataList()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getDataList()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="7、登录注册—login1204—user"><a href="#7、登录注册—login1204—user" class="headerlink" title="7、登录注册—login1204—user"></a>7、登录注册—login1204—user</h2><h3 id="1-注册—index"><a href="#1-注册—index" class="headerlink" title="(1) 注册—index"></a>(1) 注册—index</h3><ol>
<li><p>初始化云开发环境—wx.cloud.init</p>
</li>
<li><p>获取用户输入的信息—bindinput</p>
</li>
<li><p>添加校验—if</p>
</li>
<li><p>通过单击注册添加到数据库—bindtap</p>
</li>
<li><p>优化用户体验，增加友好的提示—wx.showToast</p>
</li>
<li><p>跳转到登录页面—wx.navigateTo({})</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">输入用户名</span><br><span class="line">&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"input"</span> bindinput=<span class="string">"getName"</span>&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">输入用户账号</span></span><br><span class="line"><span class="regexp">&lt;input class="input" bindinput="getZhangHao"&gt;&lt;/i</span>nput&gt;</span><br><span class="line">输入您的密码</span><br><span class="line">&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"input"</span> bindinput=<span class="string">"getMiMa"</span>&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">&lt;button bindtap="zhuCe" type = "primary"&gt;注册&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wxss</span></span><br><span class="line">.input&#123;</span><br><span class="line">  border: <span class="number">1</span>px solid gainsboro;</span><br><span class="line">  margin: <span class="number">15</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    name:<span class="string">""</span>,</span><br><span class="line">    zhangHao:<span class="string">""</span>,</span><br><span class="line">    miMa:<span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取用户名</span></span><br><span class="line">  getName(event)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      name: event.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取账号</span></span><br><span class="line">  getZhangHao(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      zhangHao: event.detail.value</span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取密码</span></span><br><span class="line">  getMiMa(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      miMa: event.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 注册</span></span><br><span class="line">  zhuCe()&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="keyword">this</span>.data.name;</span><br><span class="line">    <span class="keyword">let</span> zhangHao = <span class="keyword">this</span>.data.zhangHao;</span><br><span class="line">    <span class="keyword">let</span> miMa = <span class="keyword">this</span>.data.miMa;</span><br><span class="line">    <span class="comment">// 校验用户名</span></span><br><span class="line">    <span class="keyword">if</span>(name.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'用户名至少两位'</span>,</span><br><span class="line">        icon: <span class="string">'none'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (name.length &gt; <span class="number">10</span>)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'用户名最多10位'</span>,</span><br><span class="line">        icon: <span class="string">'none'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验账号</span></span><br><span class="line">    <span class="keyword">if</span> (zhangHao.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'账号至少四位'</span>,</span><br><span class="line">        icon: <span class="string">'none'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 校验密码</span></span><br><span class="line">    <span class="keyword">if</span> (miMa.length &lt; <span class="number">4</span>)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'密码至少4位'</span>,</span><br><span class="line">        icon: <span class="string">'none'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册功能的实现</span></span><br><span class="line">    wx.cloud.database().collection(<span class="string">"user"</span>).add(&#123;</span><br><span class="line">      data:&#123;</span><br><span class="line">        name: name,</span><br><span class="line">        zhanghao: zhangHao,</span><br><span class="line">        mima: miMa</span><br><span class="line">      &#125;,</span><br><span class="line">      success(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"添加成功"</span>,res)</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">'注册成功'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">          url: <span class="string">'../login/login'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(res)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"添加失败"</span>,res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env: <span class="string">"codemao-7hcrz"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="2-登录—login"><a href="#2-登录—login" class="headerlink" title="(2) 登录—login"></a>(2) 登录—login</h3><ol>
<li><p>更改头部文件</p>
</li>
<li><p>初始化云开发环境—wx.cloud.init</p>
</li>
<li><p>获取用户输入的数据—bindinput</p>
</li>
<li><p>首次校验格式（非数据库）—if</p>
</li>
<li><p>二次校验格式（数据库）—wx.cloud.database().collection(“user”).where({zhanghao:zhanghao}).get({})</p>
</li>
<li><p>添加友好的提示（成功和失败）—wx.showToast({})</p>
</li>
<li><p>跳转到<strong>首页并传值</strong>—wx.navigateTo({url:”../home/home?name”+user.name})</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//login.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"navigationBarTitleText"</span>: <span class="string">"登录"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.cloud.init(&#123;</span><br><span class="line">      env: <span class="string">"codemao-7hcrz"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    userInfo: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//login.wxml</span></span><br><span class="line">输入账号</span><br><span class="line">&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"input"</span> bindinput=<span class="string">"getZhangHao"</span>&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">输入密码</span></span><br><span class="line"><span class="regexp">&lt;input class="input" password="true" bindinput="getMiMa"&gt;&lt;/i</span>nput&gt;</span><br><span class="line">&lt;button type=<span class="string">"primary"</span> bindtap=<span class="string">"login"</span>&gt;登录&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/login.wxss</span></span><br><span class="line"><span class="regexp">.input&#123;</span></span><br><span class="line"><span class="regexp">  border: 1px solid gainsboro;</span></span><br><span class="line"><span class="regexp">  margin: 20rpx;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/login.js</span></span><br><span class="line"><span class="regexp">Page(&#123;</span></span><br><span class="line"><span class="regexp">  data:&#123;</span></span><br><span class="line"><span class="regexp">    zhanghao: "",</span></span><br><span class="line"><span class="regexp">    mima: ""</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 获取输入的账号</span></span><br><span class="line"><span class="regexp">  getZhangHao(event)&#123;</span></span><br><span class="line"><span class="regexp">    this.setData(&#123;</span></span><br><span class="line"><span class="regexp">      zhanghao: event.detail.value</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 获取输入的密码</span></span><br><span class="line"><span class="regexp">  getMiMa(event) &#123;</span></span><br><span class="line"><span class="regexp">    this.setData(&#123;</span></span><br><span class="line"><span class="regexp">      mima: event.detail.value</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 点击登录</span></span><br><span class="line"><span class="regexp">  login() &#123;</span></span><br><span class="line"><span class="regexp">    let zhanghao = this.data.zhanghao</span></span><br><span class="line"><span class="regexp">    let mima = this.data.mima</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 校验</span></span><br><span class="line"><span class="regexp">    if (zhanghao.length &lt; 4)&#123;</span></span><br><span class="line"><span class="regexp">      wx.showToast(&#123;</span></span><br><span class="line"><span class="regexp">        title: '账号不能小于4位',</span></span><br><span class="line"><span class="regexp">        icon: 'none'</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">      return</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    if (mima.length &lt; 4) &#123;</span></span><br><span class="line"><span class="regexp">      wx.showToast(&#123;</span></span><br><span class="line"><span class="regexp">        title: '密码不能小于4位',</span></span><br><span class="line"><span class="regexp">        icon: 'none'</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">      return</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 登录</span></span><br><span class="line"><span class="regexp">    wx.cloud.database().collection("user")</span></span><br><span class="line"><span class="regexp">    .where(&#123;</span></span><br><span class="line"><span class="regexp">      zhanghao: zhanghao,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ mima: mima</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    .get(&#123;</span></span><br><span class="line"><span class="regexp">      success(res)&#123;</span></span><br><span class="line"><span class="regexp">        console.log("获取数据成功",res.data)</span></span><br><span class="line"><span class="regexp">        let user = res.data[0]</span></span><br><span class="line"><span class="regexp">        if(mima  == user.mima)&#123;</span></span><br><span class="line"><span class="regexp">          wx.showToast(&#123;</span></span><br><span class="line"><span class="regexp">            title: '登录成功',</span></span><br><span class="line"><span class="regexp">          &#125;)</span></span><br><span class="line"><span class="regexp">          wx.navigateTo(&#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ url: '/</span>pages/home/home<span class="string">', 都可以</span></span><br><span class="line"><span class="string">            url: '</span>../home/home?name=<span class="string">' + user.name,</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">          wx.showToast(&#123;</span></span><br><span class="line"><span class="string">            title: '</span>账号或密码不正确<span class="string">',</span></span><br><span class="line"><span class="string">            icon: '</span>none<span class="string">'</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      fail(res)&#123;</span></span><br><span class="line"><span class="string">        console.log("获取数据成功", res)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="3-首页—home"><a href="#3-首页—home" class="headerlink" title="(3) 首页—home"></a>(3) 首页—home</h3><ol>
<li><p>接受登录页面传递过来的值—onload</p>
</li>
<li><p>显示到页面上面–</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//home.wxml</span></span><br><span class="line">&lt;text&gt;&#123;&#123;name&#125;&#125;，欢迎使用CodeMao开发的小程序&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/home.js</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ pages/</span>home/home.js</span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(options.name)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      name: options.name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-个人中心页"><a href="#4-个人中心页" class="headerlink" title="(4) 个人中心页"></a>(4) 个人中心页</h3><ol>
<li><p>设置top文字—“navigationBarTitleText”: “个人中心”</p>
</li>
<li><p>两种显示状态—onshow—wx:if</p>
<ul>
<li>登录时候的展示内容</li>
<li>未登录时候的展示内容</li>
</ul>
</li>
<li><p>设置登录缓存—wx.setStorageSync(‘user’, user)</p>
<ul>
<li>修改登录页面跳转到个人中心页面</li>
<li>添加缓存</li>
</ul>
</li>
<li><p>增添退出功能</p>
<ul>
<li>删除缓存—wx.getStorageSync(‘user’,null)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//me.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"navigationBarTitleText"</span>: <span class="string">"个人中心"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//me.wxml</span></span><br><span class="line">&lt;!-- 未登录状态 --&gt;</span><br><span class="line">&lt;view wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;!loginOk&#125;&#125;"</span>&gt;</span><br><span class="line">&lt;button type=<span class="string">"primary"</span> bindtap=<span class="string">"denglu"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"zhuce"</span>&gt;登录&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button type="primary" bindtap="zhuce" class="zhuce"&gt;注册&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 登录成功 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;view wx:else class="login-ok"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;text&gt;登录成功&lt;/</span>text&gt;</span><br><span class="line">  &lt;view&gt;<span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span>&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button bindtap="tuichu" type="primary"&gt;退出&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/me.wxss</span></span><br><span class="line"><span class="regexp">.zhuce&#123;</span></span><br><span class="line"><span class="regexp">  margin-top: 50rpx;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.login-ok&#123;</span></span><br><span class="line"><span class="regexp">  text-align: center</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/me.js</span></span><br><span class="line"><span class="regexp">Page(&#123;</span></span><br><span class="line"><span class="regexp">  data:&#123;</span></span><br><span class="line"><span class="regexp">    loginOk: false</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 去登录页</span></span><br><span class="line"><span class="regexp">  denglu()&#123;</span></span><br><span class="line"><span class="regexp">    wx.navigateTo(&#123;</span></span><br><span class="line"><span class="regexp">      url: '/</span>pages/login/login<span class="string">',</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  // 去注册页</span></span><br><span class="line"><span class="string">  zhuce()&#123;</span></span><br><span class="line"><span class="string">    wx.navigateTo(&#123;</span></span><br><span class="line"><span class="string">      url: '</span>/pages/index/index<span class="string">',</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  onShow()&#123;</span></span><br><span class="line"><span class="string">    let user = wx.getStorageSync('</span>user<span class="string">')</span></span><br><span class="line"><span class="string">    if (user &amp;&amp; user.name)&#123;</span></span><br><span class="line"><span class="string">      this.setData(&#123;</span></span><br><span class="line"><span class="string">        loginOk: true,</span></span><br><span class="line"><span class="string">        name: user.name</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125;else &#123;</span></span><br><span class="line"><span class="string">      this.setData(&#123;</span></span><br><span class="line"><span class="string">        loginOk: false</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  // 退出登录</span></span><br><span class="line"><span class="string">  tuichu()&#123;</span></span><br><span class="line"><span class="string">    wx.setStorageSync('</span>user<span class="string">', null)</span></span><br><span class="line"><span class="string">    let user = wx.getStorageSync('</span>user<span class="string">')</span></span><br><span class="line"><span class="string">    if (user &amp;&amp; user.name) &#123;</span></span><br><span class="line"><span class="string">      this.setData(&#123;</span></span><br><span class="line"><span class="string">        loginOk: true,</span></span><br><span class="line"><span class="string">        name: user.name</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      this.setData(&#123;</span></span><br><span class="line"><span class="string">        loginOk: false</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//login.js</span></span><br><span class="line"><span class="string">// 登录</span></span><br><span class="line"><span class="string">    wx.cloud.database().collection("user")</span></span><br><span class="line"><span class="string">      .where(&#123;</span></span><br><span class="line"><span class="string">        zhanghao: zhanghao,</span></span><br><span class="line"><span class="string">        // mima: mima</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">      .get(&#123;</span></span><br><span class="line"><span class="string">      success(res) &#123;</span></span><br><span class="line"><span class="string">        console.log("获取数据成功", res.data)</span></span><br><span class="line"><span class="string">        let user = res.data[0]</span></span><br><span class="line"><span class="string">        if (mima == user.mima) &#123;</span></span><br><span class="line"><span class="string">          wx.showToast(&#123;</span></span><br><span class="line"><span class="string">            title: '</span>登录成功<span class="string">',</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">          wx.navigateTo(&#123;</span></span><br><span class="line"><span class="string">            // url: '</span>/pages/home/home<span class="string">', 都可以</span></span><br><span class="line"><span class="string">            // url: '</span>../home/home?name=<span class="string">' + user.name,</span></span><br><span class="line"><span class="string">            url: '</span>/pages/me/me<span class="string">'</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">          // 保存用户登录状态---本地存储</span></span><br><span class="line"><span class="string">          wx.setStorageSync('</span>user<span class="string">', user)</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">          wx.showToast(&#123;</span></span><br><span class="line"><span class="string">            title: '</span>账号或密码不正确<span class="string">',</span></span><br><span class="line"><span class="string">            icon: '</span>none<span class="string">'</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      fail(res) &#123;</span></span><br><span class="line"><span class="string">        console.log("获取数据成功", res)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure>











</li>
</ol>
<h3 id="9-小程序上传内容-gt-2M"><a href="#9-小程序上传内容-gt-2M" class="headerlink" title="(9)小程序上传内容&gt;2M"></a>(9)小程序上传内容&gt;2M</h3><ol>
<li>解决方法一：<ol>
<li>分包，但是总包不能大于16M</li>
<li>或者用后台数据库图片</li>
</ol>
</li>
<li>解决方法二：<ol>
<li>压缩图片</li>
</ol>
</li>
</ol>
<h3 id="10-根据时间，小于等于3小时记单量为1，否则加1"><a href="#10-根据时间，小于等于3小时记单量为1，否则加1" class="headerlink" title="(10) 根据时间，小于等于3小时记单量为1，否则加1"></a>(10) 根据时间，小于等于3小时记单量为1，否则加1</h3><ul>
<li><p>计算出小时差和分钟差</p>
</li>
<li><p>先写特殊情况</p>
<ul>
<li>小时差&lt;0</li>
<li>小时差=0的时候<ul>
<li>分钟差&lt;=0</li>
<li>分钟差&gt;0</li>
</ul>
</li>
</ul>
</li>
<li><p>在按照分钟分</p>
<ul>
<li>如果分钟差==0</li>
<li>如果分钟差&gt;0</li>
<li>如果分钟差&lt;0</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算记单量</span></span><br><span class="line">  getJiDanLiang()&#123;</span><br><span class="line">    <span class="keyword">let</span> endtime = <span class="keyword">this</span>.data.endtime</span><br><span class="line">    <span class="keyword">let</span> arrivetime = <span class="keyword">this</span>.data.arrivetime</span><br><span class="line">    <span class="comment">// 结束时间</span></span><br><span class="line">    <span class="keyword">let</span> endhm = endtime.split(<span class="string">":"</span>)</span><br><span class="line">    <span class="comment">// 结束的小时</span></span><br><span class="line">    <span class="keyword">let</span> endh = <span class="built_in">parseInt</span>(endhm[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 结束的分钟</span></span><br><span class="line">    <span class="keyword">let</span> endm = <span class="built_in">parseInt</span>(endhm[<span class="number">1</span>])</span><br><span class="line">    <span class="comment">// 到场时间</span></span><br><span class="line">    <span class="keyword">let</span> arrivehm = arrivetime.split(<span class="string">":"</span>)</span><br><span class="line">    <span class="comment">// 到场时间小时</span></span><br><span class="line">    <span class="keyword">let</span> arriveh = <span class="built_in">parseInt</span>(arrivehm[<span class="number">0</span>]) </span><br><span class="line">    <span class="comment">// 到场时间分</span></span><br><span class="line">    <span class="keyword">let</span> arrivem = <span class="built_in">parseInt</span>(arrivehm[<span class="number">1</span>])</span><br><span class="line">    <span class="comment">// 相差的小时数</span></span><br><span class="line">    <span class="keyword">let</span> hourcha =  endh - arriveh</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hourcha"</span>, hourcha)</span><br><span class="line">    <span class="comment">// 相差的分钟数</span></span><br><span class="line">    <span class="keyword">let</span> minutecha = endm - arrivem</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算计单量</span></span><br><span class="line">    <span class="keyword">let</span> jidanliang = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hourcha &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      jidanliang = <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (hourcha == <span class="number">0</span> &amp;&amp; minutecha &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">      jidanliang = <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (hourcha == <span class="number">0</span> &amp;&amp; minutecha &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      jidanliang = <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 此时校验的是小时差 &gt; 0</span></span><br><span class="line">      <span class="comment">// 当分钟差 == 0的时候</span></span><br><span class="line">      <span class="keyword">if</span> (minutecha == <span class="number">0</span>)&#123;</span><br><span class="line">        jidanliang = <span class="built_in">Math</span>.ceil(hourcha / <span class="number">3</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当分钟差 &gt; 0</span></span><br><span class="line">      <span class="keyword">if</span> (minutecha &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (hourcha % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">          jidanliang = <span class="built_in">Math</span>.ceil(hourcha / <span class="number">3</span>) + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          jidanliang = <span class="built_in">Math</span>.ceil(hourcha / <span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当分钟差 &lt; 0</span></span><br><span class="line">      <span class="keyword">if</span> (minutecha &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (hourcha == <span class="number">3</span>)&#123;</span><br><span class="line">          jidanliang = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        jidanliang = <span class="built_in">Math</span>.ceil(hourcha / <span class="number">3</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      jidanliang: jidanliang</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getjidanliang==&gt;"</span> + jidanliang)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="11-input只能输入数字"><a href="#11-input只能输入数字" class="headerlink" title="(11) input只能输入数字"></a>(11) input只能输入数字</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发票金额</span></span><br><span class="line">  getFaPiaoJinE(e)&#123;</span><br><span class="line">    <span class="comment">//发票金额 要做验证只能输入数字</span></span><br><span class="line">    <span class="keyword">var</span> regNum = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[0-9]'</span>, <span class="string">'g'</span>);</span><br><span class="line">    <span class="keyword">var</span> rsNum = regNum.exec(e.detail.value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!rsNum) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">'只能输入数字'</span>,</span><br><span class="line">          icon: <span class="string">'none'</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>





<h3 id="12-查询数据的时候排序"><a href="#12-查询数据的时候排序" class="headerlink" title="(12)  查询数据的时候排序"></a>(12)  查询数据的时候排序</h3><ol>
<li><p>orderBy</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">wx.cloud.database().collection(event.name).orderBy(<span class="string">'index'</span>,<span class="string">'asc'</span>).get(&#123;</span><br><span class="line">    success(res) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"排序成功"</span>, res)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail(res) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"排序失败"</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h1 id="二、实战项目—demo"><a href="#二、实战项目—demo" class="headerlink" title="二、实战项目—demo"></a>二、实战项目—demo</h1><h2 id="1、-input-和-textarea"><a href="#1、-input-和-textarea" class="headerlink" title="1、 input 和 textarea"></a>1、 input 和 textarea</h2><ol>
<li>input就是当行输入框</li>
<li>textarea就是多行输入框</li>
</ol>
<h2 id="2、-页面跳转传参"><a href="#2、-页面跳转传参" class="headerlink" title="2、 页面跳转传参"></a>2、 页面跳转传参</h2><ol>
<li><p>传递前的页面用json转换成字符串：JSON.stringify(e.detail.value)</p>
</li>
<li><p>传递后的页面用json格式接受： let params = JSON.parse(e.obj)</p>
</li>
<li><p>参考文献：<a href="https://www.cnblogs.com/helena000/p/11499043.html" target="_blank" rel="noopener">https://www.cnblogs.com/helena000/p/11499043.html</a></p>
</li>
<li><p>案例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传参数页面</span></span><br><span class="line"><span class="comment">// 提交</span></span><br><span class="line">  submit(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"submit==&gt;"</span>, e.detail.value)</span><br><span class="line">    <span class="keyword">let</span> condition = e.detail.value</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: <span class="string">'/pages/queryCondition/queryCondition?obj='</span> + <span class="built_in">JSON</span>.stringify(e.detail.value),</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受参数页面</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad(e)&#123;</span><br><span class="line">    <span class="keyword">let</span> params = <span class="built_in">JSON</span>.parse(e.obj)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onLoad"</span>, params.username)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="3、-重置页面的方法"><a href="#3、-重置页面的方法" class="headerlink" title="3、 重置页面的方法"></a>3、 重置页面的方法</h2><ol>
<li><p>方法一：重置数据</p>
</li>
<li><p>方法二：this.onLoad()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wxml</span></span><br><span class="line">&lt;form bindreset=<span class="string">"reset"</span>&gt;</span><br><span class="line">	&lt;button type=<span class="string">"primary"</span> form-type=<span class="string">"reset"</span>&gt;重置&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置数据</span></span><br><span class="line">  reset(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"reset==&gt;"</span>, e)</span><br><span class="line">    <span class="keyword">this</span>.onLoad()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4、-data-的用法"><a href="#4、-data-的用法" class="headerlink" title="4、 data-的用法"></a>4、 data-的用法</h2><ol>
<li><p>作用：传递前台页面的值，一般有bindtap连用</p>
</li>
<li><p>data-后面的东西不区分大小写，接受到的<strong>名称一律小写</strong></p>
</li>
<li><p>案例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;view bindtap=<span class="string">"getData"</span> data-id=<span class="string">"123"</span>&gt;</span><br><span class="line">  点我获取data</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;view&gt;&#123;&#123;id&#125;&#125;&lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    id: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getData(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"getData==&gt;"</span>, e.currentTarget.dataset)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      id: e.currentTarget.dataset.id</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="5、-form的用法"><a href="#5、-form的用法" class="headerlink" title="5、 form的用法"></a>5、 form的用法</h2><ol>
<li><p>bindsumit</p>
</li>
<li><p>bindreset</p>
</li>
<li><p><strong>通过name获取value的值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.wxml</span></span><br><span class="line">&lt;form bindsubmit=<span class="string">"submit"</span> bindreset=<span class="string">"reset"</span>&gt;</span><br><span class="line">  &lt;input name=<span class="string">"input"</span> value=<span class="string">"&#123;&#123;input&#125;&#125;"</span>&gt;&lt;<span class="regexp">/input&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button form-type="submit" type="primary"&gt;submit&lt;/</span>button&gt;</span><br><span class="line">  &lt;button form-type=<span class="string">"reset"</span> type=<span class="string">"primary"</span>&gt;reset&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    input: <span class="string">"input"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  submit(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"submit==&gt;"</span>, e)</span><br><span class="line">  &#125;,</span><br><span class="line">  reset(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"reset==&gt;"</span>, e)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      input: <span class="string">""</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="6、-手机号正则—2020"><a href="#6、-手机号正则—2020" class="headerlink" title="6、 手机号正则—2020"></a>6、 手机号正则—2020</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 校验手机号</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>.test(phone)) &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'请输入正确的手机格式'</span>,</span><br><span class="line">        icon: <span class="string">'none'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、picker的用法"><a href="#7、picker的用法" class="headerlink" title="7、picker的用法"></a>7、picker的用法</h2><ol>
<li>种类（mode=””）<ul>
<li>单列：selector</li>
<li>多列：multiSelector</li>
<li>时间：time</li>
<li>日期：date</li>
<li>省市区：region</li>
</ul>
</li>
<li>案例<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/picker.html" target="_blank" rel="noopener">参考官方文档</a></li>
</ul>
</li>
</ol>
<h2 id="8、-页面手机屏幕"><a href="#8、-页面手机屏幕" class="headerlink" title="8、 页面手机屏幕"></a>8、 页面手机屏幕</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.wxss</span><br><span class="line">page&#123;</span><br><span class="line">  height:100%</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;每一个页面的大容器--防止有超出部分</span><br><span class="line">min-height:100%</span><br></pre></td></tr></table></figure>

<h2 id="9、-校验表单中数据是否填写完整"><a href="#9、-校验表单中数据是否填写完整" class="headerlink" title="9、 校验表单中数据是否填写完整"></a>9、 校验表单中数据是否填写完整</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> form) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!form[item]) &#123; <span class="comment">//验证form表单是否填写完整</span></span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">            title: <span class="string">'请将信息填写完整'</span>,</span><br><span class="line">            icon: <span class="string">'none'</span>,</span><br><span class="line">            duration: <span class="number">1000</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="10、-单选按钮—test"><a href="#10、-单选按钮—test" class="headerlink" title="10、 单选按钮—test"></a>10、 单选按钮—test</h2><ol>
<li>radio-group</li>
<li>radio</li>
</ol>
<h2 id="11、-input-文字显示一半"><a href="#11、-input-文字显示一半" class="headerlink" title="11、 input 文字显示一半"></a>11、 input 文字显示一半</h2><ol>
<li><p>input中添加一个view</p>
</li>
<li><p>设置input宽高都是100%</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;add.wxml</span><br><span class="line"> &lt;view class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">    &lt;label class&#x3D;&quot;item_1&quot;&gt;散客提成&lt;&#x2F;label&gt;:</span><br><span class="line">    &lt;view class&#x3D;&quot;item_2&quot;&gt;</span><br><span class="line">      &lt;input name&#x3D;&quot;ticheng&quot; placeholder&#x3D;&quot;按照提成公式填写&quot;&gt;&lt;&#x2F;input&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;add.wxss</span><br><span class="line">.item_2 &#123;</span><br><span class="line">  flex: 8;</span><br><span class="line">  padding: 10rpx;</span><br><span class="line">&#125;</span><br><span class="line">.item_2 input&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h2 id="12、-下拉触底函数不触发"><a href="#12、-下拉触底函数不触发" class="headerlink" title="12、 下拉触底函数不触发"></a>12、 下拉触底函数不触发</h2><ol>
<li><p>将页面的height不要设成100%</p>
</li>
<li><p>在该页面的json中增加下拉距离单位像素</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"onReachBottomDistance": 100</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="13、-开发时注意"><a href="#13、-开发时注意" class="headerlink" title="13、 开发时注意"></a>13、 开发时注意</h2><ol>
<li>云开发对数据进行<strong>增删改查的时候，最好都用云函数</strong>，但是上线20个，那<strong>删除和修改一定要用云函数</strong>，否则数据库的权限即使你在你这修改了，但是上线之后还是没有权限的。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>代理</title>
    <url>/2020/10/29/%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="1、代理模式简介"><a href="#1、代理模式简介" class="headerlink" title="1、代理模式简介"></a>1、代理模式简介</h1><ul>
<li>代理模式好比帮你处理其他琐碎事情的类，比如小明要结婚，那他可以找个婚庆公司帮助他干一些布置婚礼现场，婚礼前的一些准备，和婚礼后的一些准备，而婚庆公司就相当于一个代理！</li>
<li>说白了就是相当于一个代理对象帮你添加额外的功能，比如说加日志，加事务等！</li>
</ul>
<h1 id="2、代理模式的分类"><a href="#2、代理模式的分类" class="headerlink" title="2、代理模式的分类"></a>2、代理模式的分类</h1><ul>
<li>静态代理</li>
<li>动态代理</li>
</ul>
<h1 id="3、静态代理"><a href="#3、静态代理" class="headerlink" title="3、静态代理"></a>3、静态代理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个真实对象 人</span></span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line">        <span class="comment">// 创建一个代理对象 婚庆公司</span></span><br><span class="line">        WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(you);</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结婚的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marrry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marrry</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"田老师要结婚了!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//婚庆公司  相当于一个静态代理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marrry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> You you = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(You you)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.you = you;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        you.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之前布置现场"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之后收尾款"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4、动态代理"><a href="#4、动态代理" class="headerlink" title="4、动态代理"></a>4、动态代理</h1><h2 id="4-1、JDK动态代理"><a href="#4-1、JDK动态代理" class="headerlink" title="4.1、JDK动态代理"></a>4.1、JDK动态代理</h2><ol>
<li><p>编写代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandle</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">(Object targetObject)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"proxy"</span> + targetObject);</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),</span><br><span class="line">                targetObject.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加额外操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object ret = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"正在进行操作前的准备----"</span>);</span><br><span class="line">        ret = method.invoke(targetObject, args);</span><br><span class="line">        System.out.println(<span class="string">"操作成功！"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"动态代理！"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要代理对象</span></span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取代理对象</span></span><br><span class="line">    UserHandle userHandle = <span class="keyword">new</span> UserHandle();</span><br><span class="line">    UserService userServiceProxy = (UserService) userHandle.newProxyInstance(userService);</span><br><span class="line">    <span class="comment">// 代理对象调用真实方法</span></span><br><span class="line">    userServiceProxy.addUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4-2、CGLib动态代理"><a href="#4-2、CGLib动态代理" class="headerlink" title="4.2、CGLib动态代理"></a>4.2、CGLib动态代理</h2><ol>
<li><p>创建代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCGlibHandle</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserCGlibHandle</span><span class="params">(Object targetObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//字节码增强技术</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置代理类的父类是目标类</span></span><br><span class="line">        enhancer.setSuperclass(targetObject.getClass());</span><br><span class="line">        <span class="comment">//设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 编写自己要添加的业务</span></span><br><span class="line">        <span class="comment">// 增删改需要开始事务</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">"insertUser"</span>) ||</span><br><span class="line">                method.getName().equals(<span class="string">"deleteUser"</span>) ||</span><br><span class="line">                method.getName().equals(<span class="string">"updateUser"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"假装开启了事务"</span>);</span><br><span class="line">            ret = method.invoke(<span class="keyword">this</span>.targetObject, args);</span><br><span class="line">            System.out.println(<span class="string">"假装提交了事务"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ret = method.invoke(<span class="keyword">this</span>.targetObject, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span>&#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandleTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cgLibTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserCGlibHandle userCGlibHandle = <span class="keyword">new</span> UserCGlibHandle(userService);</span><br><span class="line">        UserService userServiceProxy = (UserService) userCGlibHandle.createProxy();</span><br><span class="line">        <span class="keyword">int</span> i = userServiceProxy.deleteUser(<span class="number">2</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userServiceProxy.selectByAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>小结：</strong></p>
<ul>
<li><p>CGlib动态代理可以代理实现类！</p>
</li>
<li><p>JDK动态代理只能代理接口！</p>
</li>
</ul>
<h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><ul>
<li>静态代理通常只代理一个类，动态代理会代理接口中的实现类！</li>
<li>静态代理在编译的时候就知道了要代理谁，动态代理在运行的时候才知道要代理谁！</li>
<li>spring aop即使用了动态代理，也使用了静态代理！</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/10/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多线程简介"><a href="#多线程简介" class="headerlink" title="多线程简介"></a>多线程简介</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 程序，进程，多线程</span><br><span class="line">	程序是静态的，进程就是一段程序的执行过程，是动态的，一个进程中可能包含多个线。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 注意</span><br><span class="line">	现在写的线程是模拟的，真正的多线程是多个cpu运行</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 作用</span><br><span class="line">	可以同时执行，不用等待</span><br></pre></td></tr></table></figure>

<h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程***"></a>创建线程***</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 继承Thread类</span><br><span class="line">	步骤：继承Thread类，重写run方法，创建线程对象调用start()方法</span><br><span class="line"><span class="number">2</span>. 实现Runable接口---最常用</span><br><span class="line">	步骤：实现Runable接口，重写run方法，<span class="keyword">new</span> Thread(创建线程对象).start()方法</span><br><span class="line"><span class="number">3</span>. 注意：start之后线程并不会立即执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">案例：继承Thread类</span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线程的方式一：</span></span><br><span class="line"><span class="comment"> *      继承Thread类，重写run方法，创先线程对象调用start方法启动线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意:线程启动的时候，并不是立即执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是新开的线程"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo_01 d = <span class="keyword">new</span> Demo_01();</span><br><span class="line">        <span class="comment">// 调用run就跟主方法一样 一个线程 从上到下执行</span></span><br><span class="line">        <span class="comment">//d.run();</span></span><br><span class="line">        <span class="comment">// 真正的启动线程</span></span><br><span class="line">        d.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是主线程"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">案例：实现Runable接口</span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线程的方式2：</span></span><br><span class="line"><span class="comment"> *  实现runnable接口</span></span><br><span class="line"><span class="comment"> *  重写run方法</span></span><br><span class="line"><span class="comment"> *  利用Thread对象调用start()方法启动线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  推荐使用：避免了单继承的局限性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_03</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是新开的线程"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo_03 d = <span class="keyword">new</span> Demo_03();</span><br><span class="line">        <span class="comment">// 创建Thread 代理 启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(d).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是主线程"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">案例：实现 Callable&lt;&gt;接口</span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_06</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo_06</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebdownLoader1 wd  = <span class="keyword">new</span> WebdownLoader1();</span><br><span class="line">        wd.downLoader(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载完成"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        Demo_06 d1 = <span class="keyword">new</span> Demo_06(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=346863232,310076839&amp;fm=26&amp;gp=0.jpg"</span>,<span class="string">"六神1.jpg"</span>);</span><br><span class="line">        Demo_06 d2 = <span class="keyword">new</span> Demo_06(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=346863232,310076839&amp;fm=26&amp;gp=0.jpg"</span>,<span class="string">"六神2.jpg"</span>);</span><br><span class="line">        Demo_06 d3 = <span class="keyword">new</span> Demo_06(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=346863232,310076839&amp;fm=26&amp;gp=0.jpg"</span>,<span class="string">"六神3.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建服务 n个服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 提交服务</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(d1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(d2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(d3);</span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> b2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> b3 = r3.get();</span><br><span class="line">        System.out.println(b1 + <span class="string">" "</span> +  b2 + <span class="string">" "</span> + b3);</span><br><span class="line">        <span class="comment">// 关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下载器 需要引入 commons-io-2.6.jar 放到lib中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebdownLoader1</span></span>&#123;</span><br><span class="line">    <span class="comment">// 下载图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoader</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"下载图片，downLoader"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 作用：就是多线程的底层实现，把Runable给Thread这个静态代理来启动线程</span><br><span class="line">2. 案例：模拟结婚 You你只能结婚，但是你需要让婚庆公司作为静态代理帮你打点其他东西，然后让你结婚</span><br><span class="line"></span><br><span class="line">package duoxiancheng;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 静态代理 多线程（Runnable）的底层实现原理</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo_07 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new WeddingCompany(new You()).HappyMarry();</span><br><span class="line">&#x2F;&#x2F;        new Thread(new Runnable() &#123;</span><br><span class="line">&#x2F;&#x2F;            @Override</span><br><span class="line">&#x2F;&#x2F;            public void run() &#123;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 结婚的接口</span><br><span class="line">interface Marrry&#123;</span><br><span class="line">    void HappyMarry();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class You implements Marrry&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void HappyMarry() &#123;</span><br><span class="line">        System.out.println(&quot;田老师要结婚了!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;婚庆公司  相当于一个静态代理</span><br><span class="line">class WeddingCompany implements Marrry&#123;</span><br><span class="line">    private You you &#x3D; null;</span><br><span class="line">    public WeddingCompany(You you) &#123;</span><br><span class="line">        this.you &#x3D; you;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void HappyMarry() &#123;</span><br><span class="line">        before();</span><br><span class="line">        you.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void before()&#123;</span><br><span class="line">        System.out.println(&quot;结婚之前布置现场&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void after()&#123;</span><br><span class="line">        System.out.println(&quot;结婚之后收尾款&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程的5种状态</span></span><br><span class="line"><span class="comment"> * 创建线程(new)==&gt;就绪状态(start)==&gt;启动线程==&gt;阻塞状态==&gt;线程结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观测线程状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * NEW</span></span><br><span class="line"><span class="comment"> * 至今尚未启动的线程处于这种状态。</span></span><br><span class="line"><span class="comment"> * RUNNABLE</span></span><br><span class="line"><span class="comment"> * 正在 Java 虚拟机中执行的线程处于这种状态。</span></span><br><span class="line"><span class="comment"> * BLOCKED</span></span><br><span class="line"><span class="comment"> * 受阻塞并等待某个监视器锁的线程处于这种状态。</span></span><br><span class="line"><span class="comment"> * WAITING</span></span><br><span class="line"><span class="comment"> * 无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。</span></span><br><span class="line"><span class="comment"> * TIMED_WAITING</span></span><br><span class="line"><span class="comment"> * 等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。</span></span><br><span class="line"><span class="comment"> * TERMINATED</span></span><br><span class="line"><span class="comment"> * 已退出的线程处于这种状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：线程一旦进入死亡状态就不能再启动了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_15</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"/////"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">// RUNNABLE</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED)&#123;<span class="comment">// 只要线程不是终止状态就执行</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);<span class="comment">// WAITING TERMINATED</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//thread.start(); 线程进入死亡状态之后 就不能在启动了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程的方法"><a href="#线程的方法" class="headerlink" title="线程的方法"></a>线程的方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. sleep</span><br><span class="line">    定义：就是让当前运行的线程阻塞多长时间，然后重新进入就绪状态</span><br><span class="line">    作用：模拟网路延时，倒计时，系统当前时间</span><br><span class="line">    注意：sleep有异常InterruptedException</span><br><span class="line">    	 sleep是抱着锁睡觉</span><br><span class="line"><span class="number">2</span>. join</span><br><span class="line">    定义：让当前线程立即执行，其他线程进入就绪状态</span><br><span class="line"><span class="number">3</span>. stop,destory</span><br><span class="line">	线程停止</span><br><span class="line">	方法一：JDK提供的方法 stop，destory 不建议使用</span><br><span class="line">	方法二：利用标志位来实现</span><br><span class="line"><span class="number">4</span>. yield</span><br><span class="line">    定义：礼让，让当前运行的线程进入就绪状态</span><br><span class="line"><span class="number">5</span>. wait()</span><br><span class="line">    定义：让线程进入等待，只有被唤醒的时候才会继续执行</span><br><span class="line"><span class="number">6</span>. notifyAll()</span><br><span class="line">	定义：唤醒同一个对象上所有调用wait()方法的线程，优先级高的先唤醒</span><br><span class="line"><span class="number">7</span>. notify()</span><br><span class="line">    定义：唤醒同一个对象上的一个wait()方法的线程，优先级高的先唤醒</span><br><span class="line">    </span><br><span class="line">（<span class="number">5</span>-<span class="number">7</span>案例在线程通信）</span><br><span class="line">    </span><br><span class="line"><span class="number">8</span>.案例</span><br><span class="line">案例一：线程停止</span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程的5种状态</span></span><br><span class="line"><span class="comment"> * 创建线程(new)==&gt;就绪状态(start)==&gt;启动线程==&gt;阻塞状态==&gt;线程结束</span></span><br><span class="line"><span class="comment"> * 线程停止</span></span><br><span class="line"><span class="comment"> *  方法一：JDK提供的方法 stop，destory 不建议使用</span></span><br><span class="line"><span class="comment"> *  方法二：利用标志位来实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_09</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义线程结束的标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"runrunrun==&gt;"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义停止方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo_09 d = <span class="keyword">new</span> Demo_09();</span><br><span class="line">        <span class="keyword">new</span> Thread(d).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"mainmainmain"</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>)&#123;</span><br><span class="line">                d.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sleep</span></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程休眠 sleep</span></span><br><span class="line"><span class="comment"> *  1. 定义：指定当前线程阻塞的毫秒数，时间结束后线程冲阻塞状态变成就绪状态</span></span><br><span class="line"><span class="comment"> *  2. 作用：模拟网络延时，模拟倒计时，打印系统当前时间</span></span><br><span class="line"><span class="comment"> *  3. 注意</span></span><br><span class="line"><span class="comment"> *      每个对象都有一把锁，sleep不是释放锁</span></span><br><span class="line"><span class="comment"> *      sleep存在异常InterruptedException</span></span><br><span class="line"><span class="comment"> *      Thread.sleep():让当前执行的线程指定阻塞的毫秒数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络延时,可以放大存在的问题 抢票</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_10</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 10 张火车票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟延时</span></span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"拿了"</span> + ticketNums-- +<span class="string">"号票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 资源</span></span><br><span class="line">        Demo_10 d = <span class="keyword">new</span> Demo_10();</span><br><span class="line">        <span class="comment">// 多个线程抢夺同一个资源</span></span><br><span class="line">        <span class="keyword">new</span> Thread(d,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(d,<span class="string">"小红"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(d,<span class="string">"黄牛党"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// join</span></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * join</span></span><br><span class="line"><span class="comment"> *  1. 定义 让当前线程优先执行，其他线程进入阻塞状态，直到当前线程执行完毕，类似于vip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_14</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程vip来了"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Demo_14 d = <span class="keyword">new</span> Demo_14();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(d);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>)&#123;</span><br><span class="line">               thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yield 礼让</span></span><br><span class="line"><span class="comment"> *  1. 定义 让当前执行的线程重新进入就绪状态，相当于和其他线程比较重新让cpu选择执行</span></span><br><span class="line"><span class="comment"> *  2. 注意 礼让不一定成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_13</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"开始执行"</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"结束执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo_13 a = <span class="keyword">new</span> Demo_13();</span><br><span class="line">        Demo_13 b = <span class="keyword">new</span> Demo_13();</span><br><span class="line">        <span class="keyword">new</span> Thread(a, <span class="string">"a"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(b, <span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 默认是<span class="number">5</span> 范围是<span class="number">0</span>-<span class="number">10</span></span><br><span class="line"><span class="number">2</span>. 作用：就是增加权重，让cpu调用的几率增大，不是肯定优先执行</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程的优先级</span></span><br><span class="line"><span class="comment"> * 1. 默认是5 范围是0-10</span></span><br><span class="line"><span class="comment"> * 2. 作用：就是增加权重，让cpu调用的几率增大，不是肯定优先执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_16</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyPriority mp = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mp);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mp);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(mp);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(mp);</span><br><span class="line"></span><br><span class="line">        t1.start();<span class="comment">// 默认的优先级</span></span><br><span class="line"></span><br><span class="line">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">2</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        t4.setPriority(11);</span></span><br><span class="line"><span class="comment">//        t4.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"的优先级"</span> + Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程分类"><a href="#线程分类" class="headerlink" title="线程分类"></a>线程分类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程的分类：用户线程和守护线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 虚拟机必须确保用户线程执行完毕</span></span><br><span class="line"><span class="comment"> * 虚拟机不用等待守护线程执行完毕</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 守护线程</span></span><br><span class="line"><span class="comment"> *   设置守护线程</span></span><br><span class="line"><span class="comment"> *   Thread g = new Thread(god);</span></span><br><span class="line"><span class="comment"> *   g.setDaemon(true);// 默认是false 代表用户线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_17</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You1 you = <span class="keyword">new</span> You1();</span><br><span class="line"></span><br><span class="line">        Thread g = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        g.setDaemon(<span class="keyword">true</span>);<span class="comment">// 默认是false 代表用户线程</span></span><br><span class="line">        g.start();</span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用户线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello,World"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"开心的活着"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"GoodBye,World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 守护线程 上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"上帝守护着你!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步***"></a>线程同步***</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 如何解决线程并发？</span><br><span class="line">    排队+锁</span><br><span class="line"><span class="number">2</span>. 锁</span><br><span class="line">    <span class="number">1</span>. <span class="keyword">synchronized</span></span><br><span class="line">    	分为同步方法和同步块，就相当于锁住某个方法，或者锁定块中的某个值</span><br><span class="line">    <span class="number">2</span>. lock</span><br><span class="line">    	<span class="number">1</span>. 显示的锁，ReentrantLock(可重入锁)实现了lock，一般用他来是实现lock</span><br><span class="line">    <span class="number">3</span>. 两者区别</span><br><span class="line">    	<span class="number">1</span>. lock 是显示的，需要手动开启和关闭锁，<span class="keyword">synchronized</span>是隐式的</span><br><span class="line">    	<span class="number">2</span>. lock 只能锁定代码块，<span class="keyword">synchronized</span>可以锁代码块和方法</span><br><span class="line">    	<span class="number">3</span>. lock 性能好，并且更容易扩展</span><br><span class="line">    <span class="number">4</span>. 使用优先级</span><br><span class="line">    	lock&gt;同步代码块&gt;同步方法</span><br><span class="line"><span class="number">3</span>. 死锁</span><br><span class="line">    <span class="number">1</span>. 定义：双方都持有对方想要的资源，产生僵持</span><br><span class="line">    <span class="number">2</span>. 产生死锁的四个条件</span><br><span class="line">    	互斥条件：一个资源每次只能被一个进程使用</span><br><span class="line">    	请求与保持条件：一个进程请求资源而阻塞的时，对已获得的资源保持不放</span><br><span class="line">    	不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺</span><br><span class="line">    	循环等待条件：若干进程之间形成了头尾相接的循环等待资源关系</span><br><span class="line"></span><br><span class="line"><span class="comment">// synchronized</span></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程并发怎么解决？</span></span><br><span class="line"><span class="comment"> *  排队+锁</span></span><br><span class="line"><span class="comment"> *  但是会加大内存的消耗，同时会造成性能倒置的情况</span></span><br><span class="line"><span class="comment"> *      性能倒置：资源大运行慢的先执行，资源小运行快的却执行，一直在等待</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  三大不安全案例：</span></span><br><span class="line"><span class="comment"> *      抢票</span></span><br><span class="line"><span class="comment"> *      取钱</span></span><br><span class="line"><span class="comment"> *      ArrayList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      synchronized 解决</span></span><br><span class="line"><span class="comment"> *      synchronized 同步方法 默认锁的是this</span></span><br><span class="line"><span class="comment"> *      synchronized 同步块 锁定任何对象(CRUD的对象)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_18</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       DrawTicket station = <span class="keyword">new</span> DrawTicket();</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(station);</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(station);</span><br><span class="line">       Thread t3 = <span class="keyword">new</span> Thread(station);</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNumber = <span class="number">10</span>;<span class="comment">// 10 张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">// 线程结束的标志</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNumber &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模拟演示</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"拿到"</span> + ticketNumber-- + <span class="string">"号票"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取钱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_19</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">"结婚基金"</span>);</span><br><span class="line">        DrawMoney you = <span class="keyword">new</span> DrawMoney(account, <span class="number">50</span>, <span class="string">"你"</span>);</span><br><span class="line">        DrawMoney girlFriend = <span class="keyword">new</span> DrawMoney(account, <span class="number">100</span>, <span class="string">"女朋友"</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        girlFriend.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 模拟银行取钱</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;<span class="comment">// 账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;<span class="comment">// 取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney;<span class="comment">// 手里有多少钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawMoney</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(account)&#123;</span><br><span class="line">            <span class="comment">// 取钱</span></span><br><span class="line">            <span class="keyword">if</span> (account.money - drawingMoney &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"钱不够了！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟网络延迟 放大错误</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 账户的余额</span></span><br><span class="line">            account.money = account.money - drawingMoney;</span><br><span class="line">            <span class="comment">// 手里的钱</span></span><br><span class="line">            nowMoney = nowMoney + drawingMoney;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"账户中还有："</span> + account.money);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"手里的钱："</span> + nowMoney);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ArrayList 是线程不安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_20</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建10000个线程同时往数组中添加线程的名称</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">               <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                   list.add(Thread.currentThread().getName());</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试juc安全类型的集合 这类的集合默认是线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_21</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; cal = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                cal.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(cal.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死锁：双方都持有对方想要的资源，产生僵持</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 产生死锁的四个条件</span></span><br><span class="line"><span class="comment"> *  互斥条件；一个资源每次只能被一个进程使用</span></span><br><span class="line"><span class="comment"> *  请求与保持条件：一个进程请求资源而阻塞的时，对已获得的资源保持不放</span></span><br><span class="line"><span class="comment"> *  不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺</span></span><br><span class="line"><span class="comment"> *  循环等待条件：若干进程之间形成了头尾相接的循环等待资源关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_22</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup girl1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">"灰姑凉"</span>);</span><br><span class="line">        Makeup girl2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">"白雪公主"</span>);</span><br><span class="line">        girl1.start();</span><br><span class="line">        girl2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 化妆</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">// 利用staic 保证资源的唯一性</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">// 选择</span></span><br><span class="line">    String name;<span class="comment">// 名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Makeup</span><span class="params">(<span class="keyword">int</span> choice, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeUp();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeUp</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(lipstick)&#123;<span class="comment">// 获得口红并锁定</span></span><br><span class="line">                System.out.println(name + <span class="string">"获得了口红"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="comment">// 产生死锁</span></span><br><span class="line"><span class="comment">//                synchronized (mirror) &#123;// 1秒后获得镜子</span></span><br><span class="line"><span class="comment">//                    System.out.println(name + "获得了镜子");</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过防止拿着对方想要的资源方法避免的死锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;<span class="comment">// 1秒后获得镜子</span></span><br><span class="line">                System.out.println(name + <span class="string">"获得了镜子"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(mirror)&#123;<span class="comment">// 获得镜子并锁定</span></span><br><span class="line">                System.out.println(name + <span class="string">"获得了镜子"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="comment">// 产生了死锁</span></span><br><span class="line"><span class="comment">//                synchronized (lipstick) &#123;// 2秒后获得口红</span></span><br><span class="line"><span class="comment">//                    System.out.println(name + "获得了口红");</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过防止拿着对方想要的资源方法避免的死锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;<span class="comment">// 2秒后获得口红</span></span><br><span class="line">                System.out.println(name + <span class="string">"获得了口红"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * lock锁</span></span><br><span class="line"><span class="comment"> *  1. 显示的锁，ReentrantLock(可重入锁)实现了lock，一般用他来是实现lock</span></span><br><span class="line"><span class="comment"> *  2. lock 和 synchronized 的区别</span></span><br><span class="line"><span class="comment"> *      1. lock 是显示的，需要手动开启和关闭锁，synchronized是隐式的</span></span><br><span class="line"><span class="comment"> *      2. lock 只能锁定代码块，synchronized可以锁代码块和方法</span></span><br><span class="line"><span class="comment"> *      3. lock 性能好，并且更容易扩展</span></span><br><span class="line"><span class="comment"> *      4. 使用优先级</span></span><br><span class="line"><span class="comment"> *          lock&gt;同步代码块&gt;同步方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_23</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Station station = <span class="keyword">new</span> Station();</span><br><span class="line">        <span class="keyword">new</span> Thread(station).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Station</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNumber = <span class="number">10</span>;<span class="comment">// 火车票</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();<span class="comment">// 开启锁</span></span><br><span class="line">                <span class="keyword">if</span> (ticketNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNumber--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();<span class="comment">// 关闭锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 功能：实现线程的通信</span><br><span class="line"><span class="number">2</span>. 如何实现？</span><br><span class="line">    管程法</span><br><span class="line">    信号灯法</span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者消费者问题</span></span><br><span class="line"><span class="comment"> *  就是生产者和消费者之间的通信问题。生产者生产东西通知消费者消费，消费者消费结束通知生产者生产</span></span><br><span class="line"><span class="comment"> *  wait() 等待，sleep是抱着锁睡觉，wait是释放锁等待</span></span><br><span class="line"><span class="comment"> *  notify() 通知，唤醒</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  解决方法</span></span><br><span class="line"><span class="comment"> *      1. 管程法：就是通过数据缓存区来解决，超过缓存区大小就停止生产唤醒消费者，空的话就停止消费者唤醒生产 者</span></span><br><span class="line"><span class="comment"> *      2. 信号灯法：就是利用一个标识来确实是等待还是唤醒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 管程法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_24</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">        <span class="keyword">new</span> Producer(container).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生产产品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            System.out.println(<span class="string">"生产者生产了"</span> + i + <span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消费产品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Chicken chicken = container.pop();</span><br><span class="line">            System.out.println(<span class="string">"消费者消费了"</span> + chicken.id + <span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据缓存区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line">    <span class="comment">// 容器</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">// 计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者生产产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果容器满了，则停止生产</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果容器没有满，则继续添加商品，并唤醒消费者消费</span></span><br><span class="line">        chickens[count++] = chicken;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果容器没有产品，则进入等待状态</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果容器有产品，则消费者消费，并且可以通知生产者生产了</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号灯法</span></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者消费者-信号灯法</span></span><br><span class="line"><span class="comment"> *  就是用一个标志位来标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_25</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Actor(tv, <span class="string">"快乐大本营"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Actor(tv, <span class="string">"抖音记录美好生活"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Audience(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者-演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    String voice;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(TV tv, String voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tv.play(<span class="keyword">this</span>.voice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者-观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audience</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Audience</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品-节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line">    <span class="comment">// T代表表演者表演节目，观众等待 F代表观众观看节目，表演者等待</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 表演者表演 节目</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 观众在观看节目 表演者等待</span></span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表演者表演节目 并通知观众可以再次观看</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        System.out.println(<span class="string">"表演者表演："</span> + voice);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;<span class="comment">// 更改状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 观众观看 节目</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 表演者在表演节目 观众需要等待</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 观众观看节目 并通知表演者可以再次表演 同时改变状态</span></span><br><span class="line">        System.out.println(<span class="string">"观众观看了："</span> + <span class="keyword">this</span>.voice);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 定义</span><br><span class="line">	就是将线程放到线程池中来管理</span><br><span class="line"><span class="number">2</span>. 作用</span><br><span class="line">	<span class="number">1</span>. 提高响应速度（减少了创建线程的时间）</span><br><span class="line">	<span class="number">2</span>. 降低资源消耗（重复使用线程）</span><br><span class="line">	<span class="number">3</span>. 便于线程管理</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 如何创建</span><br><span class="line">	<span class="number">1</span>. 利用callable</span><br><span class="line">	<span class="number">2</span>. 利用runnable</span><br><span class="line"></span><br><span class="line"><span class="comment">// runnable</span></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_26</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建可以放10个线程的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 提交线程</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        <span class="comment">// 关闭线程</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是我线程！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// callable</span></span><br><span class="line"><span class="keyword">package</span> duoxiancheng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_06</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo_06</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebdownLoader1 wd  = <span class="keyword">new</span> WebdownLoader1();</span><br><span class="line">        wd.downLoader(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载完成"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        Demo_06 d1 = <span class="keyword">new</span> Demo_06(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=346863232,310076839&amp;fm=26&amp;gp=0.jpg"</span>,<span class="string">"六神1.jpg"</span>);</span><br><span class="line">        Demo_06 d2 = <span class="keyword">new</span> Demo_06(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=346863232,310076839&amp;fm=26&amp;gp=0.jpg"</span>,<span class="string">"六神2.jpg"</span>);</span><br><span class="line">        Demo_06 d3 = <span class="keyword">new</span> Demo_06(<span class="string">"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=346863232,310076839&amp;fm=26&amp;gp=0.jpg"</span>,<span class="string">"六神3.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建服务 n个服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 提交服务</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(d1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(d2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(d3);</span><br><span class="line">        <span class="comment">// 获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> b2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> b3 = r3.get();</span><br><span class="line">        System.out.println(b1 + <span class="string">" "</span> +  b2 + <span class="string">" "</span> + b3);</span><br><span class="line">        <span class="comment">// 关闭服务</span></span><br><span class="line">        ser.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下载器 需要引入 commons-io-2.6.jar 放到lib中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebdownLoader1</span></span>&#123;</span><br><span class="line">    <span class="comment">// 下载图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoader</span><span class="params">(String url, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"下载图片，downLoader"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>小程序---如何上传代码？</title>
    <url>/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="小程序—如何上传代码？"><a href="#小程序—如何上传代码？" class="headerlink" title="小程序—如何上传代码？"></a>小程序—如何上传代码？</h1><h2 id="一、前提-结果"><a href="#一、前提-结果" class="headerlink" title="一、前提+结果"></a>一、前提+结果</h2><h3 id="1、前提"><a href="#1、前提" class="headerlink" title="1、前提"></a>1、前提</h3><ul>
<li>已经写好的代码，准备上传代码玩玩的</li>
<li>我用的云开发写的小程序，没有JAVA等语言写服务器后台</li>
</ul>
<h3 id="2、结果"><a href="#2、结果" class="headerlink" title="2、结果"></a>2、结果</h3><ul>
<li>通过扫描二维码可以找到自己的小程序</li>
</ul>
<h2 id="二、具体流程"><a href="#二、具体流程" class="headerlink" title="二、具体流程"></a>二、具体流程</h2><h3 id="1、-材料准备"><a href="#1、-材料准备" class="headerlink" title="1、 材料准备"></a>1、 材料准备</h3><ul>
<li>先把自己的小程序运行的时候截屏</li>
<li>在录视一个小程序运行时候的视频大概1-2分钟</li>
</ul>
<h3 id="2、上传代码"><a href="#2、上传代码" class="headerlink" title="2、上传代码"></a>2、上传代码</h3><ul>
<li><p>点击微信开发者工具的上传</p>
</li>
<li><p>填写版本号和项目描述即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image01.png" alt></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image02.png" alt></p>
</li>
</ul>
<h3 id="3、-微信公众平台"><a href="#3、-微信公众平台" class="headerlink" title="3、 微信公众平台"></a>3、 微信公众平台</h3><ul>
<li><p>登录微信公众平台</p>
</li>
<li><p>版本管理==》提交审核</p>
<ul>
<li><p>所需的材料：小程序的截图+视频录制</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image03.png" alt></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image04.png" alt></p>
</li>
</ul>
</li>
<li><p>上传</p>
<ul>
<li><p>等审核结束后一定要来微信公众平台上传</p>
</li>
<li><p>全量发布和灰度发布</p>
<ul>
<li>全量发布：所有用户同步更新</li>
<li>灰度发布：所有用户分时段更新，当功能很多的时候，有利于降低承受风险</li>
</ul>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image05.png" alt></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image07.png" alt></p>
</li>
</ul>
</li>
<li><p>生成小程序入口二维码</p>
<ul>
<li>位置：微信公众平台</li>
</ul>
<p><img src= "/img/loading.gif" data-src="/2020/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%EF%BC%9F/image06.png" alt></p>
</li>
</ul>
<h2 id="三、干就完事了！"><a href="#三、干就完事了！" class="headerlink" title="三、干就完事了！"></a>三、干就完事了！</h2>]]></content>
  </entry>
  <entry>
    <title>小程序---如何更换开发者appid？</title>
    <url>/2020/08/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%BC%80%E5%8F%91%E8%80%85appid%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="如何给小程序更换开发者或appid？"><a href="#如何给小程序更换开发者或appid？" class="headerlink" title="如何给小程序更换开发者或appid？"></a>如何给小程序更换开发者或appid？</h1><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><h3 id="1、有两个appid即可"><a href="#1、有两个appid即可" class="headerlink" title="1、有两个appid即可"></a>1、有两个appid即可</h3><h3 id="2、适用情况"><a href="#2、适用情况" class="headerlink" title="2、适用情况"></a>2、适用情况</h3><ol>
<li>如果用到了云开发，则执行具体流程的全部流程</li>
<li>如果没有用到云开发，只需要更改具体流程的<strong>前两步骤</strong></li>
</ol>
<h2 id="二、具体流程"><a href="#二、具体流程" class="headerlink" title="二、具体流程"></a>二、具体流程</h2><h3 id="1、备份文件"><a href="#1、备份文件" class="headerlink" title="1、备份文件"></a>1、备份文件</h3><ul>
<li>将云数据库导出</li>
<li>将项目代码备份（以防万一）</li>
<li>如果没有可以不用操作</li>
</ul>
<h3 id="2、更改appid"><a href="#2、更改appid" class="headerlink" title="2、更改appid"></a>2、更改appid</h3><ul>
<li><p>位置：project.config.json</p>
</li>
<li><p>appid：“改成要修改的appid”</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%BC%80%E5%8F%91%E8%80%85appid%EF%BC%9F/image01.png" alt></p>
</li>
</ul>
<h3 id="3、修改环境变量"><a href="#3、修改环境变量" class="headerlink" title="3、修改环境变量"></a>3、修改环境变量</h3><ul>
<li><p>更改app.js</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%BC%80%E5%8F%91%E8%80%85appid%EF%BC%9F/image02.png" alt></p>
</li>
<li><p>更改云函数的环境变量</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%BC%80%E5%8F%91%E8%80%85appid%EF%BC%9F/image03.png" alt></p>
</li>
</ul>
<h3 id="4、重新上传云函数"><a href="#4、重新上传云函数" class="headerlink" title="4、重新上传云函数"></a>4、重新上传云函数</h3><ul>
<li><p>上传项目所需要的云函数</p>
</li>
<li><p>点击云函数右键选择”上传并部署…不上传node…”</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/24/%E5%B0%8F%E7%A8%8B%E5%BA%8F---%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%BC%80%E5%8F%91%E8%80%85appid%EF%BC%9F/image04.png" alt></p>
</li>
</ul>
<h2 id="三、踩过的坑"><a href="#三、踩过的坑" class="headerlink" title="三、踩过的坑"></a>三、踩过的坑</h2><h3 id="1、明明改了云函数环境，还报环境id配置错误"><a href="#1、明明改了云函数环境，还报环境id配置错误" class="headerlink" title="1、明明改了云函数环境，还报环境id配置错误"></a>1、明明改了云函数环境，还报环境id配置错误</h3><ul>
<li>相信我，你肯定没有全部上传云函数，在重新上传并部署一下！</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>快捷键</title>
    <url>/2020/07/30/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="一、IDEA"><a href="#一、IDEA" class="headerlink" title="一、IDEA"></a>一、IDEA</h1><h2 id="1-选择相同变量名—Shift-F6"><a href="#1-选择相同变量名—Shift-F6" class="headerlink" title="1. 选择相同变量名—Shift+F6"></a>1. 选择相同变量名—Shift+F6</h2><h2 id="2-导包—Shift-Ait-Enter"><a href="#2-导包—Shift-Ait-Enter" class="headerlink" title="2. 导包—Shift+Ait+Enter"></a>2. 导包—Shift+Ait+Enter</h2><h2 id="3-运行当前代码—Ctrl-Shift-F10"><a href="#3-运行当前代码—Ctrl-Shift-F10" class="headerlink" title="3. 运行当前代码—Ctrl+Shift+F10"></a>3. 运行当前代码—Ctrl+Shift+F10</h2><h2 id="4-进入控制台—F12"><a href="#4-进入控制台—F12" class="headerlink" title="4. 进入控制台—F12"></a>4. 进入控制台—F12</h2><h2 id="5-格式化代码—Ctrl-Alt-L"><a href="#5-格式化代码—Ctrl-Alt-L" class="headerlink" title="5. 格式化代码—Ctrl+Alt+L"></a>5. 格式化代码—Ctrl+Alt+L</h2><h2 id="6-GetSet快捷键—Alt-Insert"><a href="#6-GetSet快捷键—Alt-Insert" class="headerlink" title="6. GetSet快捷键—Alt+Insert"></a>6. GetSet快捷键—Alt+Insert</h2><h1 id="二、全局快捷键"><a href="#二、全局快捷键" class="headerlink" title="二、全局快捷键"></a>二、全局快捷键</h1><h2 id="1-关闭对话框—Alt-F4"><a href="#1-关闭对话框—Alt-F4" class="headerlink" title="1. 关闭对话框—Alt+F4"></a>1. 关闭对话框—Alt+F4</h2>]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2020/07/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p>
<hr>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p>
<hr>
<p>##参考文献</p>
<p><a href="http://www.codesheep.cn" target="_blank" rel="noopener">www.codesheep.cn</a></p>
]]></content>
  </entry>
  <entry>
    <title>技术题</title>
    <url>/2020/10/27/%E6%8A%80%E6%9C%AF%E9%A2%98/</url>
    <content><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><ol>
<li><p>为什么重写equal()的同时还要重写hasCode()</p>
<ul>
<li><p>为了提高效率，因为hascode比较是在equal比较之前执行的，假如说没有重写hasCode，现在set中有1万条数据，再写一条数据就会比较一万次判断是否重复，如果重写了hascode的话，然后通过hash算法看看给的地址的值是否有值</p>
</li>
<li><p>防止如果equal的结果是true还能添加到set集合当中，比如我有一个person类值比较name，但是age不同，如果不重写hasCode的话，就会把两个person对象都添加到set中（因为hasCode不同，先比较的hascode）</p>
</li>
</ul>
</li>
</ol>
<p>参考博客：<strong><a href="https://blog.csdn.net/qq_35868412/article/details/89380409" target="_blank" rel="noopener">https://blog.csdn.net/qq_35868412/article/details/89380409</a></strong></p>
<ol start="2">
<li><p>==和equal的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 默认情况下==和equal是一样的</span><br><span class="line">2. 如果重写了equal方式，他就会按照自己写的逻辑比较</span><br><span class="line">3. String是系统重写了equal方法，所以按照写的方式比较</span><br><span class="line">4. 一般来说，我们一般用==比较基本数据类型，equal来比较引用数据类型</span><br></pre></td></tr></table></figure>
</li>
<li><p>abstract 和 interface </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 相同点</span><br><span class="line">	- 都不能被实例化</span><br><span class="line"><span class="number">2</span>. 不同点</span><br><span class="line">    - 抽象类可以有构造方法，但是接口中没有构造方法</span><br><span class="line">    - 抽象类中的变量修饰符可以是任意的，但是接口的变量修饰符只能是<span class="keyword">public</span>+<span class="keyword">static</span>+<span class="keyword">final</span></span><br><span class="line">    - 抽象类中的方法可以是抽象的，也可以是非抽象的,接口中的方法都是抽象的方法只能是pubic+<span class="keyword">abstract</span></span><br><span class="line">    - 抽象类是用继承的方式实现，单继承，抽象类的是用implements实现</span><br><span class="line"><span class="number">3</span>. 有抽象类为什么还要有接口？</span><br><span class="line">    - 抽象类式单继承，接口是多实现</span><br><span class="line">    - 继承的方式容易发生类爆炸</span><br><span class="line">    - +不同点，比如变量，方法等等</span><br><span class="line"><span class="number">4</span>. 为什么有接口还有抽象类?</span><br><span class="line">    - 抽象类中可以写一些个性的东西，接口只能写共性的东西</span><br><span class="line">    - +不同点，比如变量，方法等等</span><br></pre></td></tr></table></figure>
</li>
<li><p>jdk和jre区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. jdk是开发环境，</span><br><span class="line">	可以编译有javac.exe文件</span><br><span class="line">	jvisualVM可以监视cpu，线程的运行</span><br><span class="line">	javadoc.exe 生成开发文档</span><br><span class="line">	keytool.exe 密钥和证书的工具</span><br><span class="line">2. jre是运行环境</span><br><span class="line">	jre中主要有的是dll文件，动态链接库，供操作系统访问</span><br></pre></td></tr></table></figure>
</li>
<li><p>int和Integer的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. int 是基本数据类型，Integer是引用数据类型</span><br><span class="line">2. Integer主要可以解决类型转换的问题</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本数据类型有哪些并且为什么要定义这些基本数据类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. byte,char,short,int,long,boolean,float,double</span><br><span class="line">    1    2     2    4   8      1      4      8</span><br><span class="line">2. 每个基本数据类型都占有固定的存储空间，这样可以节空间</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么字符串可以字面量赋值？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 首先我们直到字符串是常用的，栈中运行是比较快的，但是字符串长度不固定，这样空间就很可能浪费，所以直接开一个常量池，来存放即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>保留字，关键字，标识符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 保留字是系统保留的字，不能够使用，也是关键字</span><br><span class="line">2. 关键字是含有特殊意义的字</span><br><span class="line">3. 标识符就是我们定义的变量名等，命名规则是必须以字母下划线美元符号开头，可以跟数字字母下划线美元符号</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么可以Integer b = 3;这样赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 从jdk1.5之后就有了自动拆装箱，他就等价于Integer b = new Integer(3);自动装箱</span><br><span class="line">2. 自动拆箱是int a = b;</span><br></pre></td></tr></table></figure>
</li>
<li><p>面向对象的三大特性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 封装</span><br><span class="line">	- 就是将属性私有化并提供一个对外访问的接口，将数据保护起来</span><br><span class="line">2. 继承</span><br><span class="line">	- 就是子类拥有了父类非私有的属性和方法，并且可以重写，主要是提高代码的复用性</span><br><span class="line">3. 多态</span><br><span class="line">	- 父类引用指向子类对象，有继承，重写等特点，主要是可以提高代码的可替换性（可以替换已存在的代码），可扩展性（可以在父类的基础上在扩展子类），简化性，简化了代码的编写！</span><br></pre></td></tr></table></figure>
</li>
<li><p>short a = 1; a = a + 1; a += 1;哪个对？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. a = a + 1; 是错的因为1是整形，ashort，必须强转</span><br><span class="line">2. a += 1 ==&gt; a = (short)(a + 1);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何用sql语句获取系统当前时间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. select dataname(YY,getdate()) -获取年 sql server支持的</span><br><span class="line">2. select dataname(MM,getdate()) -获取月 sql server支持的</span><br><span class="line">3. select now(); mysql支持的</span><br></pre></td></tr></table></figure>
</li>
<li><p>转发((forward))和重定向(sendRedirect)的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 转发是服务器内部实现的，不透明,重定向是服务器外部实现的,透明的</span><br><span class="line">2. 转发是一次请求一次响应，重定向是多次请求多次响应</span><br><span class="line">3. 转发不可以跳转外网，重定向可以跳转外网</span><br></pre></td></tr></table></figure>
</li>
<li><p>arraylist和数组定义固定长度，超出下标赋值或者获取会发生声明结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. ArrayList</span><br><span class="line">	添加不会报错，但是get获取会报错 IndexOutOfBoundsException</span><br><span class="line">2. 数组</span><br><span class="line">	添加和获取都会报错！ArrayIndexOutOfBoundsException</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程同步中，对象的锁在（）情况下持有线程返回 ？B</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">A:当synchronized()语句块执行完后</span><br><span class="line">B:当在synchronized()语句块执行中出现例外（exception）时</span><br><span class="line">C:当持有锁的线程调用该对象的wait()方法时</span><br><span class="line">D:以上都是</span><br></pre></td></tr></table></figure>
</li>
<li><p>在java语言中，临界区可以是在一个语句块，或者是一个方法，用什么关键字标识</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有关会话跟踪技术描述正确的是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">A：Cookie是Web服务器发送给客户端的一小段信息，客户端请求时，可以读取该信息发送到服务器端</span><br><span class="line">B：关闭浏览器意味着会话ID丢失，但所有与原会话关联的会话数据仍保留在服务器上，直至会话过期</span><br><span class="line">C：在禁用Cookie时可以使用URL重写技术跟踪会话</span><br><span class="line">D：隐藏表单域将字段添加到HTML表单并在客户端浏览器中显示</span><br><span class="line"></span><br><span class="line">答案：AC</span><br><span class="line">B: 关闭浏览器会话ID不会丢失</span><br><span class="line">D：此表单不在客户端显示</span><br></pre></td></tr></table></figure>
</li>
<li><p>会话跟踪的四种方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. url重写技术</span><br><span class="line">2. 隐藏表单域</span><br><span class="line">3. session 服务器端 无限制 安全 消耗性能</span><br><span class="line">4. cookie  浏览器端 最大4k 不安全</span><br></pre></td></tr></table></figure>
</li>
<li><p>servlet中设置HTTP响应类型为HTML网页，应使用那种contentType </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">text/html</span><br></pre></td></tr></table></figure>
</li>
<li><p>get和post请求区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. get和post请求其实就是Http协议的两种请求方式</span><br><span class="line">2. Http是根据基于tcp/ip的，tcp相当于一个运输的汽车，http相当于交通规则，贴标签的，比如get，post，http就限定，get吧数据放车顶（url，透明的）并限定2k大小，post数据放车厢（请求体中），安全</span><br><span class="line">3. get是发送一次数据包（header和data一块发送），post是发送两次数据包（一次header，一次data）</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合（<strong>答案待更新</strong>）</p>
<table>
<thead>
<tr>
<th align="center">集合</th>
<th align="center">线程安全/不安全</th>
<th align="center">有序/无序</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ArrayList</td>
<td align="center">不安全</td>
<td align="center">有序</td>
</tr>
<tr>
<td align="center">LinkedList</td>
<td align="center">不安全</td>
<td align="center">有序</td>
</tr>
<tr>
<td align="center">HashSet</td>
<td align="center"></td>
<td align="center">无序</td>
</tr>
<tr>
<td align="center">TreeSet</td>
<td align="center"></td>
<td align="center">无序</td>
</tr>
<tr>
<td align="center">Queue</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Vector</td>
<td align="center">安全</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">HashMap</td>
<td align="center">不安全</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">TreeMap</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">HashTable</td>
<td align="center">安全</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Properties</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>子类继承父类的静态代码块，代码块，构造的执行顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(<span class="string">"A1:父类静态代码区域"</span>);&#125;</span><br><span class="line">    &#123; System.out.println(<span class="string">"A2：父类非静态代码区域"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"A3：父类构造器"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;System.out.println(<span class="string">"B1:子类静态代码区域"</span>);&#125;</span><br><span class="line">    &#123;System.out.println(<span class="string">"B2：子类非静态代码区域"</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"B3：子类构造器"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b1 = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"===="</span>);</span><br><span class="line">        B b2 = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">A1:父类静态代码区域</span><br><span class="line">B1:子类静态代码区域</span><br><span class="line">A2：父类非静态代码区域</span><br><span class="line">A3：父类构造器</span><br><span class="line">B2：子类非静态代码区域</span><br><span class="line">B3：子类构造器</span><br><span class="line">====</span><br><span class="line">A2：父类非静态代码区域</span><br><span class="line">A3：父类构造器</span><br><span class="line">B2：子类非静态代码区域</span><br><span class="line">B3：子类构造器</span><br></pre></td></tr></table></figure>
</li>
<li><p>servlet实现原理</p>
</li>
<li><p>jsp的执行流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. jsp本质上也是servlet，继承了HttpServlet</span><br><span class="line">2. 执行流程：jsp文件先转换成.java文件，在变成.class文件，最后执行！</span><br></pre></td></tr></table></figure>
</li>
<li><p>cookie和session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. cookie  浏览器端  不安全 <span class="number">4</span>k</span><br><span class="line"><span class="number">2</span>. session 服务器端  安全  无限制</span><br><span class="line">为什么要有cookie？</span><br><span class="line">cookie是来存储session发送的sessionId的</span><br><span class="line">因为web是没会话机制的，一次请求就会立马断开，再次请求的时候就不认识了，所以就有了cookie</span><br></pre></td></tr></table></figure>
</li>
<li><p>ArrayList和LinkedList区别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.ArrayList 是顺序存储，LinkedList是链式存储</span><br><span class="line"><span class="number">2</span>.顺序存储查找比较快，但是插入，删除，修改慢</span><br><span class="line">  链式存储查找比较慢，但是插入，删除，修改比较快</span><br><span class="line">为什么顺序查找比链式查找快？</span><br><span class="line">    因为内存读取是每次读取连续的一小块区域，顺序存储的位置都是相邻的，而链式存储不一定是相邻的！</span><br></pre></td></tr></table></figure>
</li>
<li><p>面向对象的六大原则</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 单一职责原则：一个类只负责一项职责！</span><br><span class="line">2. 开闭原则：对程序的扩展开放，修改关闭！</span><br><span class="line">3. 接口隔离原则：多个隔离的接口是比单个接口的耦合性低！</span><br><span class="line">4. 里氏替换原则：任何基类出现的地方，子类都可以出现！</span><br><span class="line">5. 迪米特原则：一个类尽可能的和其他类减少关系，最好是一个独立的模块！</span><br><span class="line">6. 依赖倒转原则：主要是针对接口编程，依赖抽象而不依赖与具体的实现！</span><br></pre></td></tr></table></figure>

<p>参考博客：<strong><a href="https://www.cnblogs.com/silencer/p/10812417.html" target="_blank" rel="noopener">https://www.cnblogs.com/silencer/p/10812417.html</a></strong></p>
</li>
<li><p>Java如何回滚？（<strong>答案不确定</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、Connection conn = DataBaseFactory.getDataBase().getConnection();</span><br><span class="line"><span class="number">2</span>、设置conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="number">3</span>、只有执行conn.commit();才会一起提交，否则不会一起提交  conn.rollback(); 回滚方法</span><br></pre></td></tr></table></figure>

<p>参考博客：<strong><a href="https://blog.csdn.net/zhangjiaqianghh/article/details/82351013?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/zhangjiaqianghh/article/details/82351013?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param</a></strong></p>
</li>
<li><p><strong>为什么使用接口降低了耦合性？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 耦合性低就是删除调用层和接受层次无关</span><br><span class="line"><span class="number">2</span>. 比如我们有一个UserService的接口和一个UserServiceImpl接口的实现类，当这个实现类的功能没用的时候直接把它删除就可以了！这就是为什么接口降低了耦合性！</span><br></pre></td></tr></table></figure>
</li>
<li><p>jsp/servlet内置对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. application</span><br><span class="line">2. session</span><br><span class="line">3. request</span><br><span class="line">4. response</span><br><span class="line">5. page：当前对象</span><br><span class="line">6. pageContext：页面上下文对象</span><br><span class="line">7. response</span><br><span class="line">8. out</span><br><span class="line">9. config</span><br></pre></td></tr></table></figure>
</li>
<li><p>常见的异常有哪些？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 空指针异常：NullPointerException</span><br><span class="line"><span class="number">2</span>. 类型转换异常：ClassCastException</span><br><span class="line"><span class="number">3</span>. 数组下标越界异常：ArrayIndexOutOfBoundsException 	</span><br><span class="line"><span class="number">4</span>. 文件未找到异常：FileNotFoundException</span><br><span class="line"><span class="number">5</span>. 算术条件异常：java.lang.ArithmeticException</span><br></pre></td></tr></table></figure>
</li>
<li><p>final修饰的位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. final 修饰的类不能被继承</span><br><span class="line">2. final 修饰的变量必须被赋值且不能被修改</span><br><span class="line">3. final 修饰的类不能被继承</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合的分类</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/27/%E6%8A%80%E6%9C%AF%E9%A2%98/%E9%9B%86%E5%90%88%E7%9A%84%E5%88%86%E7%B1%BB.png" alt></p>
</li>
<li><p>for循环的执行顺序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">首先初始化执行第一个参数，然后和第二个参数比较，如果满足条件，执行循环体，然后在执行第三个参数，继续判断即执行第二个参数，满足条件继续执行，不满足直接退出。然后循环执行！</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳出循环有哪几种方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. break：跳出当前循环！</span><br><span class="line">2. continue：结束本次循环！</span><br><span class="line">3. return：结束当前方法，并返回！</span><br><span class="line">4. 打标记，跳出多重循环！break 标记;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/ivy-xu/p/12552237.html" target="_blank" rel="noopener">参考博客</a></p>
</li>
<li><p>Arraylist和LinkedList区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. ArrayList相当于一个动态增长的数组，LinkedList相当与一个双向链表</span><br><span class="line">2. 数组是按照索引连续存储，查找比较快，但是删除修改添加比较慢，而链表删除修改添加比较快，但是查询比较慢</span><br><span class="line">3. 为什么数组查询快那？因为内存读取数据的时候是按照连续的内存读取的正好符合数组的规范，所以数组查询比较快！</span><br></pre></td></tr></table></figure>
</li>
<li><p>set是如何保证唯一的，怎么让他不唯一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. set在添加的时候会自动比较equal和hashcode之后都不相同的时候才能被添加！</span><br><span class="line">2. 重写equal和hashCode，让equal返回false，hashCode返回一个不相同的数！</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何循环遍历数组或者集合</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. for循环</span><br><span class="line">2. foreach</span><br><span class="line">3. Iterator迭代器</span><br><span class="line">增强for循环和for循环的区别？</span><br><span class="line">增强for循环底层是Iterator迭代器，主要是遍历集合和数组的，写法更加简单方便，但是没有下标！</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程的5中状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 创建状态</span><br><span class="line">2. 就绪状态</span><br><span class="line">3. 运行状态</span><br><span class="line">4. 阻塞状态</span><br><span class="line">5. 死亡状态</span><br></pre></td></tr></table></figure>
</li>
<li><p>多线程callable和runable的区别？</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>Runnable</th>
<th>Callable</th>
</tr>
</thead>
<tbody><tr>
<td>返回值</td>
<td>无</td>
<td>T类型</td>
</tr>
<tr>
<td>能否抛出异常</td>
<td>否</td>
<td>是</td>
</tr>
</tbody></table>
</li>
<li><p>线程池是什么，有什么优点？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类似于一个池子，主要就是用来存放线程的！</span><br><span class="line"><span class="number">1</span>.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</span><br><span class="line"><span class="number">2</span>.可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约<span class="number">1</span>MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</span><br></pre></td></tr></table></figure>
</li>
<li><p>jvm垃圾回收有哪些算法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 标记清除算法</span><br><span class="line">2. 复制算法</span><br><span class="line">3. 标记整理算法</span><br><span class="line">4. 分代收集算法</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/swordfall/p/10731728.html#auto_id_4" target="_blank" rel="noopener">参考博客</a></p>
</li>
<li><p>什么时候会用到多线程？【<strong>有待更新</strong>】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">主要就是高并发的时候会用到多线程，比如设计游戏的时候，多个任务角色，多个坦克等等，在比如，我们多个人同时购买火车票等等。</span><br></pre></td></tr></table></figure>
</li>
<li><p>java中创建对象的方式有哪些？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. new的方式，这种方式是最常见的方式</span><br><span class="line">2. 反射的方式，调用java.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。</span><br><span class="line">3. 调用对象的clone方法</span><br><span class="line">4. 运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法。</span><br></pre></td></tr></table></figure>
</li>
<li><p>模拟验证码，为什么用画的方式？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 防止机器操作</span><br><span class="line">2. 如何实现？</span><br><span class="line">	方式一：主要是用画笔画出来的，首先定义一个BufferImage（图片缓冲区），并且活得画笔，先画一个背景和颜色，然后通过随机数生成几个随机字符，并且通过画笔画到图片缓冲区上面，字符的颜色也是随机生成，然后把这些字符放到session中，最后通过ImageIO输出成图片！</span><br><span class="line">	方式二：利用kaptcha工具类定义验证的形状颜色等等，然后通过ImageIO的方式变成图片输出到页面上，比较可以直接取session中key值就可以了，kaptcha自动把值放到session中了！</span><br></pre></td></tr></table></figure>
</li>
<li><p>忘记密码怎么修改密码，如何保证安全性？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">修改密码的时候用邮箱号和手机号码的唯一性来保证安全性。</span><br></pre></td></tr></table></figure>
</li>
<li><p>mybatis中怎么传递参数，并且怎么取他的值？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">mybatis传递多个参数</span><br><span class="line">    1. 建议一个类封装他的属性参数，传递类即可</span><br><span class="line">    2. 可以直接传递一个map，key是属性名</span><br><span class="line">    3. 直接传递多个参数，取值用#&#123;param1&#125;,#&#123;param2&#125;传递</span><br><span class="line">mybatis的sql语句如果返回多个参数</span><br><span class="line">    1. 建立一个包装类，包含所有返回的属性  resultType直接返回这个类</span><br><span class="line">    2. 用resultMap做映射关系</span><br><span class="line">    3. 直接返回map就可以 取的时候key就是属性</span><br></pre></td></tr></table></figure>
</li>
<li><p>#{}和${}的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. #&#123;&#125;是预编译处理，相当于一个占位符，mybatis在处理#&#123;&#125;会替换成？，然后set的时候才会换成值，并且会加上单引号，有效的防止的sql注入，提高了系统安全性！</span><br><span class="line">2. $&#123;&#125;是字符串拼接，mybatis在处理$&#123;&#125;会直接变量的值放进去，不会加单引号，可能能会造成sql注入，不安全！</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序有几种，怎么实现？是否稳定！</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/27/%E6%8A%80%E6%9C%AF%E9%A2%98/%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95.png" alt></p>
<p><strong>口诀：希快选堆不稳，堆快归快！</strong></p>
</li>
<li><p>红黑树到底是什么？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">红黑树是特殊的平衡二叉树，可以保证查询，删除，添加之后的时间复杂度都是非常高效的，是O(logn)</span><br><span class="line">它具有以下性质：</span><br><span class="line">	- 节点不是红色就是黑色</span><br><span class="line">	- 根节点和叶子节点都是黑色的</span><br><span class="line">	- 每个红节点的子节点都是黑色的</span><br><span class="line">	- 任意一个节点到每个叶子节点的路径上的黑色节点数都是一样的</span><br><span class="line">因为它具有了以上的性质保证了，从根节点到叶子节点上的最长路径不可能大于最短路径的2倍！</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 基础题</span><br><span class="line">2. 线程题</span><br><span class="line">3. 集合题</span><br><span class="line">4. 异常题</span><br><span class="line">5. 算法题</span><br><span class="line">6. 虚拟机</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol>
<li><p>js的全局函数</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/27/%E6%8A%80%E6%9C%AF%E9%A2%98/js%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0.png" alt></p>
</li>
<li><p>鲁棒性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">下列不属于Java语言鲁棒性特点的是</span><br><span class="line">A：java能程序在编译和运行时的错误</span><br><span class="line">B：Java能运行虚拟机实现跨平台</span><br><span class="line">C：Java自己操纵内存减少了内存出错的可能性</span><br><span class="line">D：Java还实现了真数组，避免了覆盖数据类型的可能</span><br><span class="line"></span><br><span class="line">解答：Java鲁棒性的特点如下：Java在编译和运行程序时都要对可能出现的问题进行检查，以防止错误的产生。Java编译器可以查出许多其他语言运行时才能发现的错误。Java不支持指针操作，大大减少了错误发生的可能性。Java具有异常处理的功能，当程序异常时，它能捕获并响应意外情况，以保证程序能稳妥地结束，计算机系统不会崩溃。而Java能运行虚拟机实现跨平台是Java的与平台无关性的特点。所以本题选B。</span><br></pre></td></tr></table></figure>
</li>
<li><p>js内置对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. String</span><br><span class="line">2. Number</span><br><span class="line">3. Boolean</span><br><span class="line">4. Array</span><br><span class="line">5. Object</span><br><span class="line">6. Math</span><br><span class="line">7. Function 函数构造器</span><br><span class="line">8. Error</span><br><span class="line">9. RegExp</span><br><span class="line">10. Arguments 函数参数集合</span><br></pre></td></tr></table></figure>
</li>
<li><p>看图说话</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;%= page==<span class="keyword">this</span> %&gt;<span class="comment">// 结果是true</span></span><br><span class="line">&lt;% int sum = <span class="number">8</span>;  %&gt;</span><br><span class="line">&lt;%! int sum = <span class="number">1</span>; %&gt;</span><br><span class="line">&lt;%= sum++ %&gt; <span class="comment">// 结果是8</span></span><br><span class="line">&lt;%= <span class="keyword">this</span>.sum++ %&gt;<span class="comment">// 结果是1</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><ol>
<li><p>jq选择器中怎么选择上一个下一个父亲孩子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$("p").prev();</span><br><span class="line">$("p").next();</span><br><span class="line">$("p").parent();</span><br><span class="line">$("p").children();</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ol>
<li><p>什么是事务</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。</span><br><span class="line">在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序。</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的四大特性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">A：原子性，要么全部完成要么全部不完成</span><br><span class="line">C：一致性，事务提交前后保持一致，如果A向B转100，不管转多少次他们总和不变</span><br><span class="line">I：隔离型，事务之间是相互隔离的</span><br><span class="line">D：一致性，一旦提交永久改变</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务并发产生的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 脏读</span><br><span class="line">	读到未提交的数据，比如事务A修改了数据，还未提交，事务B就读取到了修改后的结构</span><br><span class="line">2. 不可重复读</span><br><span class="line">	一个事务范围内两次读取的结果不一样，比如事务A查询某条数据之后，事务B修改了，A又查询了却结果不一致（主要针对update）</span><br><span class="line">3. 幻读</span><br><span class="line">	根据相同条件查询的结果不一致（主要针对insert）</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的四种隔离级别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 读未提交</span><br><span class="line">2. 读已提交，可以解决脏读，oracle默认的隔离级别</span><br><span class="line">3. 可重复度，可以解决不可重复读，mysql默认的隔离级别</span><br><span class="line">4. 序列化，可以解决幻读，比较耗费性能</span><br></pre></td></tr></table></figure>
</li>
<li><p>并发控制及解决方案</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 概念</span><br><span class="line">	就是多个用户进程线程同时操作的时候，可能会发生读读，读写，写写，读读没啥问题，那要是写的话是不是就造成问题了。</span><br><span class="line">2. 解决方案</span><br><span class="line">	悲观并发控制：相当于加了个锁，独占资源，锁又读写锁，读锁只能读，写锁能读能写。加锁又会造成死锁，如何解决？抢占资源+时间戳的方式来解决</span><br><span class="line">	乐观并发控制：不是加锁，而是利用并发的思想解决，例如时间戳等</span><br><span class="line">	多版本并发控制：创建多个版本并快速挑选</span><br></pre></td></tr></table></figure>
</li>
<li><p>索引的分类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 普通索引: 加速查询</span><br><span class="line">2. 主键索引: 加速查询+列值唯一且非空+只能有一个</span><br><span class="line">3. 唯一索引: 加速查询+列值唯一</span><br><span class="line">4. 组合索引: 加速查询+小于大于多个单个组合索引拆查询+遵循最左前缀集合(查询的第一个字段必须是建了索引)</span><br><span class="line">5. 全文索引: 主要就是查询关键字的</span><br></pre></td></tr></table></figure>
</li>
<li><p>给字段起别名，where，group by 可以用吗？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">- mysql中可以where不可以用，但是group by和order by 可以用,并且mysql对查询做了优化，所以group by 可以用别名</span><br><span class="line">- oracle中只有order by 可以用</span><br><span class="line">主要原因是执行顺序</span><br><span class="line">    (1)form...join...on</span><br><span class="line">    (2)where</span><br><span class="line">    (3)group by</span><br><span class="line">    (4)分组函数</span><br><span class="line">    (5)having</span><br><span class="line">    (6)select</span><br><span class="line">    (7)distinct</span><br><span class="line">    (8)order by</span><br><span class="line">    (9)limit</span><br></pre></td></tr></table></figure>
</li>
<li><p>having和where区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. having是对分组后的数据筛选，where 是对分组前的数据进行筛选（因为执行顺序不同）</span><br><span class="line">2. having可以写分组函数，比如avg，sum等等，where不可以使用分组函数</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果优化sql？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 首先考虑对where和having后面的字段建立索引</span><br><span class="line">2. 在where中避免使用容易造成全表扫描的东西，比如!=,in,是否为空，or等等</span><br><span class="line">3. 不要使用num/2=100，而是使用num = 100*2;</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><p> 1、/和./和../</p>
<ul>
<li><p>/：代表根目录，但是<strong>js中不适用</strong></p>
</li>
<li><p>./：“.”：代表当前目录</p>
</li>
<li><p>../：“..”：代表上一级目录</p>
</li>
</ul>
<h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><ol>
<li><p>分解质因数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分解质因数</span></span><br><span class="line"><span class="comment"> * eg 90 = 2 * 3 * 3 * 5</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 什么叫质因数？</span></span><br><span class="line"><span class="comment"> * 该数既是质数，也是90的约数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路：就是找约数的同时也找质数</span></span><br><span class="line"><span class="comment"> * 约数：number % k = 0</span></span><br><span class="line"><span class="comment"> * 质数：合数的第一个约数是质数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> number = scan.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.print(number + <span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 判断k是不是约数</span></span><br><span class="line">            <span class="comment">// k不用判断指数，因为合数的第一个约数就是质数，并且k从小到大递增的</span></span><br><span class="line">            <span class="keyword">if</span> (number % k == <span class="number">0</span>)&#123;</span><br><span class="line">                number/=k;</span><br><span class="line">                <span class="keyword">if</span> (number == <span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print(k);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(k + <span class="string">"*"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>判断字符串中的字符是否存在相同的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断字符串中的字符是否存在相同的</span></span><br><span class="line"><span class="comment"> *  eg: "abbc" 有相同的</span></span><br><span class="line"><span class="comment"> *      "abc" 没有相同的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  思路：O(n)</span></span><br><span class="line"><span class="comment"> *      因为一般ascii理论上只有256个字符，所有如果s的长度大于256 必定有重复</span></span><br><span class="line"><span class="comment"> *      如果小于256，定义一个256长的boolean数组，默认false</span></span><br><span class="line"><span class="comment"> *      求每个字符的ascii 然后将对应的下标的 值改成 true 第二次还是true 的话则说明是相同的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(unique(s)?<span class="string">"没有相同的"</span>:<span class="string">"有相同的"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">unique</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">256</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] b = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">256</span>];<span class="comment">// 默认都是false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (b[c]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            b[c] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最大连续和</p>
</li>
<li><p>最少移动几次数组有序</p>
</li>
</ol>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><ol>
<li><p>http协议有几层？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">物理层：定义传输介质的特性</span><br><span class="line">数据链路层程：定义单个路由的传输方式</span><br><span class="line">网络层：定义路由的实现方式</span><br><span class="line">传输层：选择差错恢复协议还是无参错恢复协议</span><br><span class="line">会话层：定义会话的开始，控制和结束</span><br><span class="line">表示层：定义数据的格式和加密</span><br><span class="line">应用层：应用之间的相互通信</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>技术题2</title>
    <url>/2020/11/24/%E6%8A%80%E6%9C%AF%E9%A2%982/</url>
    <content><![CDATA[<h3 id="1、加密算法有哪些？"><a href="#1、加密算法有哪些？" class="headerlink" title="1、加密算法有哪些？"></a>1、加密算法有哪些？</h3><ul>
<li>对称加密算法，对称加密算法就是用同一个密钥对明文进行加密和解密，这样计算量小，加密效率高，加密速度快，可逆，但是交易双方都使用同一个密钥，安全性难以保障，并且对于密钥的管理也成为了一种负担，适用于对于大量数据的加密，比如保存用户手机号，身份证等敏感信息但能解密的信息，常见的对称加密算法有AES（128位密钥），DES（64位密钥），3DES</li>
<li>非对称加密算法，非对称加密算法就是一对匹配的公钥和私钥，发送方通过获取接收方的公钥对明文加密，然后接收方用自己的私钥对密文进行解密，这样安全性更高，方便密钥的管理，但是不可逆，加密解密的时间长，速度慢，适用于对少量数据的加密，比如签名和认证，常见的非对称加密算法有RSA，DSA（数字签名用），ECC（移动设备用）</li>
</ul>
<h3 id="2、加密的种类"><a href="#2、加密的种类" class="headerlink" title="2、加密的种类"></a>2、加密的种类</h3><ul>
<li>不可逆加密，一旦加密就不可以反向解密，一般用于对密码或者卡号等不可解密的信息，常见的加密算法有MD5，SHA，HMAC！</li>
</ul>
<h3 id="3、验证码是怎么实现的，目的是什么？"><a href="#3、验证码是怎么实现的，目的是什么？" class="headerlink" title="3、验证码是怎么实现的，目的是什么？"></a>3、验证码是怎么实现的，目的是什么？</h3><ul>
<li>方式一，通过img的src属性进行get请求controller层，然后controller层定义一个图片缓冲区BufferedReader并获取一个画笔，通过画笔调整颜色和背景框，通过随机取字符串下标的方式获取验证码，并放到session中，最终转换成ImageIO返回给前端</li>
<li>方式二，通过kaptcha工具类，通过配置文件配置他就可以了！</li>
<li>目的：防止登录是暴力破解和恶意注册！</li>
</ul>
<h3 id="4、上传多张图片如果出现了网络异常怎么办？"><a href="#4、上传多张图片如果出现了网络异常怎么办？" class="headerlink" title="4、上传多张图片如果出现了网络异常怎么办？"></a>4、上传多张图片如果出现了网络异常怎么办？</h3><ul>
<li>可以通过事务的方式处理，首先设置成手动提交事务，然后利用try，catch中的catch，如果发生异常则回滚，如果是未发生异常提交即可！</li>
</ul>
<h3 id="5、token认证的目的"><a href="#5、token认证的目的" class="headerlink" title="5、token认证的目的"></a>5、token认证的目的</h3><ul>
<li>防止在未登录的情况下，通过url的方式获取数据</li>
<li>实现方式是主要是利用了JWT框架，通过JWT的签名的方法获取一段字段串返回给前端，然后每次请求的时候都需要带上token，后端校验token是否正确，然后返回数据或者错误信息！</li>
</ul>
<h3 id="6、new方式和newInstance方式的区别"><a href="#6、new方式和newInstance方式的区别" class="headerlink" title="6、new方式和newInstance方式的区别"></a>6、new方式和newInstance方式的区别</h3><ul>
<li>如果想要获取对象的私有属性和方法只能通过反射的方式获取</li>
<li>new的话必须知道类名，反射可以事先不知道类名，通过参数的传递获取类名，比如Spring中的bean注入</li>
<li>new是静态编译，反射式动态编译，静态编译是把所有内容都生成exe文件，而动态遍历是需要谁调用谁，节省资源！</li>
</ul>
<h3 id="7、平常写代码的时候使用过哪些设计模式？"><a href="#7、平常写代码的时候使用过哪些设计模式？" class="headerlink" title="7、平常写代码的时候使用过哪些设计模式？"></a>7、平常写代码的时候使用过哪些设计模式？</h3><ul>
<li>单例模式，只能自己创建自己，并且只有一个实例。有饿汉式，懒汉式，双检索等方式。常见的地方有spring的bean，默认采用的是单例模式中的饿汉式，还有Runtime，采用也是饿汉式。他们都符合单例模式的特点，只能创建一个实例。</li>
<li>代理模式，代理模式在生活中的体现未我要结婚，然后需要一个婚庆公司来帮我打理一些琐事，在代码中体现的话有加日志，事务等等。代理模式分别有静态代理和动态代理两种，静态代理事先就知道代理的对象，所以只能代理一个类，而动态代理在运行的时候才知道要代理的对象，可以代理接口，代理任意的实现类。</li>
</ul>
<h3 id="8、常用的排序有哪些，什么时候会用到排序？"><a href="#8、常用的排序有哪些，什么时候会用到排序？" class="headerlink" title="8、常用的排序有哪些，什么时候会用到排序？"></a>8、常用的排序有哪些，什么时候会用到排序？</h3><ul>
<li>冒泡排序，两两比较，每次循环都会找到最大的放到最后，直接循环结束，时间复杂度是O(n^2)</li>
<li>快速排序，首先选定一个基准，然后让基准左边的元素都小于它，右边的元素都大于它，然后递归基准左边的元素和右边的元素！时间复杂度是O(logn)，但是不稳定</li>
<li>插入排序，将每个元素和前面的元素依次比较，知道找到自己的位置放进入即可，时间复杂度是O(n^2)</li>
</ul>
<h3 id="9、锁有哪些？"><a href="#9、锁有哪些？" class="headerlink" title="9、锁有哪些？"></a>9、锁有哪些？</h3><ul>
<li>公平锁/非公平锁，公平锁就是按照申请锁的顺序来获取锁，非公平锁并非如此，ReentrantLock默认是非公平锁，但是可以通过构造函数设置为公平锁，Synchronized是非公平锁</li>
<li>可重入锁，又称为递归锁，当进入外层带有锁的方法时候，内存的方法也会加上锁，可以避免死锁，ReentrantLock和Synchronized都是可重入锁</li>
<li>独享锁和共享锁，共享锁代表一个锁可以被多个线程同时访问，独享锁代表一个锁只能被一个线程独享，ReentrantLock，Synchronized都是独享锁，而ReaderWriterLock是共享锁</li>
<li>乐观锁和悲观锁，乐观锁认为当对同一个数据进行并发操作的时候是不会发生修改的，所以不必加锁，适用于大量数据的读写，悲观锁则认为对同一个数据进行并发操作的时候肯定会发生修改的，必须加锁，反而效率变低了</li>
<li>偏向锁/轻量级锁/重量级锁</li>
<li>分段锁，即使把锁的粒度变小了</li>
<li>自旋锁，尝试获取锁的线程不会立即阻塞，然后通过循环的方式尝试获取锁，这样做的目的减少了线程之间的切换，但是增加了cpu的消耗！</li>
</ul>
<h3 id="10、使用-Transaction注解的坑"><a href="#10、使用-Transaction注解的坑" class="headerlink" title="10、使用@Transaction注解的坑"></a>10、使用@Transaction注解的坑</h3><p>@Transaction注解失效的情况</p>
<ul>
<li>@Transaction的方法必须是public</li>
<li>同一个类中，两个@Transaction方法直接嵌套会失效</li>
</ul>
<h3 id="11、-，-的区别"><a href="#11、-，-的区别" class="headerlink" title="11、#，$的区别"></a>11、#，$的区别</h3><ul>
<li>#通过占位符的方式来替换内容，$是通过字符串替换的方式</li>
<li>#是会在还没有替换内容的时候，进行一次预编译，当替换的时候，不是在编译sql，所以有效的防止了sql注入</li>
</ul>
<h3 id="12、IO用到了哪些设计模式，代理模式和装饰模式的区别"><a href="#12、IO用到了哪些设计模式，代理模式和装饰模式的区别" class="headerlink" title="12、IO用到了哪些设计模式，代理模式和装饰模式的区别"></a>12、IO用到了哪些设计模式，代理模式和装饰模式的区别</h3><ul>
<li>使用到了适配器模式 适配器模式是将一个接口转换成客户期望的接口，比如说将字符串转换成字节数据，字节数据转换成流数据，</li>
<li>还使用到了装饰模式，装饰模式是在类本身的基础上添加一些额外的功能，比如说把InputStreamReader转成BufferedReader</li>
<li>代理模式强调的是找一个对象来帮你处理一些事情，对代理的对象施加控制，而装饰模式强调的增强自身</li>
</ul>
<h3 id="13、什么情况下ArrayList增删比LinkedList快"><a href="#13、什么情况下ArrayList增删比LinkedList快" class="headerlink" title="13、什么情况下ArrayList增删比LinkedList快"></a>13、什么情况下ArrayList增删比LinkedList快</h3><ul>
<li>在中间增删的时候，ArrayList是比LinkedList快的</li>
<li>因为通过源码我们可以看到Linked在增删的时候，会有一个加速，如果此索引小于链表长度的二分之一的时候，从左往右遍历， 否则从右往左遍历，当数据量大的时候，如果插入了中间则会从右往左遍历比ArrayList往后移动慢</li>
</ul>
<h3 id="14、为什么双检索要在对象上加volatile？"><a href="#14、为什么双检索要在对象上加volatile？" class="headerlink" title="14、为什么双检索要在对象上加volatile？"></a>14、为什么双检索要在对象上加volatile？</h3><ul>
<li>首先双检索的方式保证了线程的安全性（通过加锁的方式）并且还提升了效率（就是当初始化对象完毕之后，不需要在竞争锁了，第一份if循环就进不去了）</li>
<li>volatile关键字可以保证原子性和禁止指令重排序，因为初始化对象和指向对象分配内存地址两个不存在依赖关系，在运行的时候发生重排序，不一定谁先执行，如果先执行指向分配内存地址，另外一个线程进来了，还未初始化，但是变量此时不是null了，则很有可能发生异常，所以必须加volatile</li>
</ul>
<h3 id="15、SpringBoot中依赖有哪些，其中starter中哪些，作用是什么？"><a href="#15、SpringBoot中依赖有哪些，其中starter中哪些，作用是什么？" class="headerlink" title="15、SpringBoot中依赖有哪些，其中starter中哪些，作用是什么？"></a>15、SpringBoot中依赖有哪些，其中starter中哪些，作用是什么？</h3><ul>
<li>spring-boot-starter-web+spring-boot-starter-jdbc+mysql-connect-java</li>
<li>spring-boot-starter主要包含了自动配置和日志和YAML</li>
<li>spring-boot-maven-plugin，maven打包的依赖</li>
</ul>
<h3 id="16、SpringBoot的入口主类是什么，启动流程是什么？"><a href="#16、SpringBoot的入口主类是什么，启动流程是什么？" class="headerlink" title="16、SpringBoot的入口主类是什么，启动流程是什么？"></a>16、SpringBoot的入口主类是什么，启动流程是什么？</h3><ul>
<li>@SpringBootApplication注解下的SpringApplication中的run方法</li>
</ul>
<h3 id="17、为什么要用SpringBoot-，自动配置的原理是什么？"><a href="#17、为什么要用SpringBoot-，自动配置的原理是什么？" class="headerlink" title="17、为什么要用SpringBoot ，自动配置的原理是什么？"></a>17、为什么要用SpringBoot ，自动配置的原理是什么？</h3><ul>
<li>首先我们知道SSM的配置文件有很多个，简称是“配置地狱”，然后SpringBoot就诞生了，他有一些自动配置，节省了配置</li>
<li>自动配置的原理其实就是因为@SpringBootApplication注解中的@EnableAutoConfiguration</li>
<li>@EnableAutoConfiguration中有@AutoConfigurationPackage自动导入配置到和@Import(AutoConfigurationImportSelector.class)自动导入选择器</li>
</ul>
<h3 id="18、redis五种键值类型"><a href="#18、redis五种键值类型" class="headerlink" title="18、redis五种键值类型"></a>18、redis五种键值类型</h3><ul>
<li>String，字符串</li>
<li>Hashs，哈希表，哈希表的元素是字符串</li>
<li>Lists，list集合</li>
<li>Sets，set集合</li>
<li>Sorted sets，有序集</li>
</ul>
<h3 id="19、java的优点，三个以上"><a href="#19、java的优点，三个以上" class="headerlink" title="19、java的优点，三个以上"></a>19、java的优点，三个以上</h3><ul>
<li>分布式，跨平台，一次编译到处运行</li>
<li>语言简单，很像C+</li>
<li>面向对象，相对于面向过程来说，面向对象更加符合人的想法</li>
</ul>
<h3 id="20、IO流了解哪些，怎么读写文件"><a href="#20、IO流了解哪些，怎么读写文件" class="headerlink" title="20、IO流了解哪些，怎么读写文件"></a>20、IO流了解哪些，怎么读写文件</h3><ul>
<li>按照流的方向分为输入流和输出流，按照处理的单位不同有分为字符流和字节流</li>
<li>输入流是把其他地方的内容输入到程序中，输出流是把程序中的内容写到其他地方，字节流是每次只读取一个字节，字符流每次读取两个字节</li>
<li>bio是同步阻塞IO，一个连接一个线程，nio是同步非阻塞io，一个请求一个线程，aio是异步非阻塞io，一个有效的请求一个线程</li>
<li>读文件可以通过fileinputstream（字节），inputstreamreader（字符），bufferreader（行），输出的话有bufferedwriter和filewriter</li>
</ul>
<h3 id="21、游标了解不，怎么使用"><a href="#21、游标了解不，怎么使用" class="headerlink" title="21、游标了解不，怎么使用"></a>21、游标了解不，怎么使用</h3><ul>
<li>游标是处理数据的一种方法，可以查看或者处理结果集中的数据，只适用于存储过程和函数</li>
<li>可以通过declare 定义游标，通过open和close打开和关闭游标，fetch处理结果</li>
</ul>
<h3 id="22、为什么使用索引提高了查询的效率？"><a href="#22、为什么使用索引提高了查询的效率？" class="headerlink" title="22、为什么使用索引提高了查询的效率？"></a>22、为什么使用索引提高了查询的效率？</h3><ul>
<li>使用索引的目的就是为了提高查询效率，而提高查询效率的方法就是检查数据检索的范围</li>
<li>索引是利用b+树的方式来减少数据检索的范围，数据检索的次数和树的高度有关，主要过程就是从上往下遍历，如果比这个数小就找左子树，在区间的话就找中间，大的话找右边的</li>
</ul>
<h3 id="23、开发中常见的规范"><a href="#23、开发中常见的规范" class="headerlink" title="23、开发中常见的规范"></a>23、开发中常见的规范</h3><ul>
<li>命名规范，比如类名用大驼峰，方法名用小驼峰等，常量名大写</li>
<li>mysql中window下是不区分大小写，Linux区分，所以命名一般用下划线</li>
</ul>
<h3 id="24、jdk1-8之后的新特性"><a href="#24、jdk1-8之后的新特性" class="headerlink" title="24、jdk1.8之后的新特性"></a>24、jdk1.8之后的新特性</h3><ul>
<li>lambda表达式，函数式接口</li>
<li>接口中可以有默认的方法（default）和静态方法</li>
</ul>
<h3 id="25、设计模式六大原则"><a href="#25、设计模式六大原则" class="headerlink" title="25、设计模式六大原则"></a>25、设计模式六大原则</h3><ul>
<li>单一职责原则</li>
<li>开闭原则</li>
<li>接口隔离原则</li>
<li>里氏替换原则</li>
<li>依赖倒置原则</li>
<li>迪米特原则</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>算法---排序</title>
    <url>/2020/07/29/%E7%AE%97%E6%B3%95---%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="一-、冒泡排序"><a href="#一-、冒泡排序" class="headerlink" title="一 、冒泡排序"></a>一 、冒泡排序</h2><ol>
<li><p>思想</p>
<ul>
<li>数组中从头开始进行相邻两数依次比较，大的在后，小的在前</li>
<li>eg:arr={1,3,2}; 首先1和3比较，3大于1，继续；3和2比较，2小于3，交换</li>
<li>每次循环都会找到一个最大值，并且会放到最后</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>内循环，防止<strong>下标越界</strong></li>
<li><strong>优化代码</strong>：每次内循环都可以减少一次比较的次数，因为每次会出来一个最大值</li>
</ul>
</li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_018</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">// 注意j &lt; arr.length-1-i</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="comment">// 交换值</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//-这个也是遍历数组 等价于 for(int i=0;i&lt;arr.length;i++)&#123;&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e:arr) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="二、选择排序—升序"><a href="#二、选择排序—升序" class="headerlink" title="二、选择排序—升序"></a>二、选择排序—升序</h2><ol>
<li><p>思想</p>
<ul>
<li>定义一个最小值下标变量</li>
<li>外循环来控制找的次数==数组的长度</li>
<li>内循环来控制寻找当前数组中最小值的下标</li>
<li>每次循环找到当前数组范围的最小值下标之后依次放到数组的第一个位置，第二个位置等等</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>内循环的j = i，因为每次已经吧最小的放到第一个吧，不用参与排序了</li>
</ul>
</li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_018</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//-数组必须有序</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">//- 定义最小值的下标</span></span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;arr.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[min]) min = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换</span></span><br><span class="line">            <span class="keyword">int</span> tmp = arr[min];</span><br><span class="line">            arr[min] = arr[i];</span><br><span class="line">            arr[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//-这个也是遍历数组 等价于 for(int i=0;i&lt;arr.length;i++)&#123;&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e:arr) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>算法---查找</title>
    <url>/2020/07/29/%E7%AE%97%E6%B3%95---%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="一、顺序查找"><a href="#一、顺序查找" class="headerlink" title="一、顺序查找"></a>一、顺序查找</h2><ol>
<li><p>思想</p>
<ul>
<li>就是用查找的值和容器中的所有值，一个一个比较</li>
</ul>
</li>
<li><p>案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.test;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_018</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">        <span class="comment">//判断是否有此数的标志</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num == arr[i])&#123;</span><br><span class="line">                flag= <span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">"当前值对应的索引是："</span>+i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"抱歉，查无此数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="二、二分查找"><a href="#二、二分查找" class="headerlink" title="二、二分查找"></a>二、二分查找</h2><ol>
<li><p>前提</p>
<ul>
<li>数组必须是<strong>有序</strong>的</li>
</ul>
</li>
<li><p>思想</p>
<ul>
<li>定义最小值下标0，最大值下标（数组长度-1）来计算中间值下标（min+max）/2</li>
<li>将查找的值来和中间值比较，</li>
<li>如果大于中间值，则最小值下标=mid+1，再次计算中间值下标</li>
<li>如果小于中间值，则最大值的下标=mid-1,再次计算中间值下标</li>
<li>计算完中间值下标之后，再次循环2、3、4步骤，知道查找到值</li>
<li>如果没有值，则<strong>退出循环的条件是</strong>min&gt;max</li>
</ul>
</li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.neuedu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_018</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//-数组必须有序</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">        <span class="comment">//判断是否有此数的标志</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (max + min) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(min&lt;max)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num &lt; arr[min])&#123;</span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt; arr[min])&#123;</span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (max + min) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(num == arr[min])&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                System.out.println(<span class="string">"这个数的下标是："</span>+min);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"查无此数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
  </entry>
</search>
